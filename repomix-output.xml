This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cache/
  Microsoft/
    DeveloperTools/
      deviceid
  replit/
    env/
      latest
      latest.json
    modules/
      nodejs-20.res
      postgresql-16.res
      replit.res
      web.res
    nix/
      env.json
    toolchain.json
.local/
  state/
    replit/
      agent/
        .latest.json
.upm/
  store.json
client/
  src/
    components/
      map/
        location-map.tsx
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
      nav-bar.tsx
      ride-card.tsx
      sequence-manager.tsx
    hooks/
      use-auth.tsx
      use-mobile.tsx
      use-toast.ts
    lib/
      protected-route.tsx
      queryClient.ts
      utils.ts
    pages/
      auth-page.tsx
      bus-guide-page.tsx
      create-ride.tsx
      guide-page.tsx
      home-page.tsx
      join-ride.tsx
      not-found.tsx
      profile.tsx
      ride-details.tsx
      vendor-dashboard.tsx
    App.tsx
    index.css
    main.tsx
  index.html
server/
  auth.ts
  db.ts
  index.ts
  routes.ts
  storage.ts
  vite.ts
shared/
  schema.ts
.gitignore
.replit
drizzle.config.ts
package.json
postcss.config.js
README.md
replit.nix
tailwind.config.ts
theme.json
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cache/Microsoft/DeveloperTools/deviceid">
51e3a29c-ca2f-4d06-8eec-a3845e199aaa
</file>

<file path=".cache/replit/env/latest">
declare -gx REPL_IDENTITY_KEY=k2.secret.SentdmN1teNuupVoqhLfiP6WnmZ1ys0jYBcjNZBDQuJDeIitGp_YVRRcGUEFvhmIgxxr0tKZy-jzgcnRhirXIg
declare -gx depsBuildBuildPropagated=''
declare -gx NIX_PS1='\[\033[01;34m\]\w\[\033[00m\]\$ '
declare -gx STRIP=strip
declare -gx NIX_BUILD_TOP=/tmp
declare -gx XDG_DATA_DIRS=/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/share:/nix/store/bcsji16g1szdg0j8znlvbkbfxpkvlgiz-replit-runtime-path/share
declare -gx NIX_PROFILES='/nix/var/nix/profiles/default /home/runner/.nix-profile'
declare -gx REPLIT_ENVIRONMENT=production
declare -gx AR=ar
declare -gx CXX=g++
declare -gx GIT_ASKPASS=replit-git-askpass
declare -gx CONFIG_SHELL=/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash
declare -gx mesonFlags=''
declare -gx HOST_PATH=/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin
declare -gx cmakeFlags=''
declare -gx phases=buildPhase
declare -gx npm_config_prefix=/home/runner/workspace/.config/npm/node_global
declare -gx NIX_CC=/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0
declare -gx CC=gcc
declare -gx NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
read -r _new_path <<< "/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/7zaapw8wkywsw9z5lkkk5k608xpn7wfl-bun-1.2.3/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/rdd4pnr4x9rqc9wgbibhngv217w2xvxl-bash-interactive-5.2p26/bin:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/bin:/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin:/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0/bin:/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41/bin:/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41/bin:/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin:/nix/store/rmzzfy35ld8zk6ljb5vy9xdvwjic3r6y-pid1/bin:/nix/store/bcsji16g1szdg0j8znlvbkbfxpkvlgiz-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#PATH=/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/7zaapw8wkywsw9z5lkkk5k608xpn7wfl-bun-1.2.3/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/rdd4pnr4x9rqc9wgbibhngv217w2xvxl-bash-interactive-5.2p26/bin:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/bin:/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin:/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0/bin:/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41/bin:/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41/bin:/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin:/nix/store/rmzzfy35ld8zk6ljb5vy9xdvwjic3r6y-pid1/bin:/nix/store/bcsji16g1szdg0j8znlvbkbfxpkvlgiz-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
if [ -e "/run/replit/env/last" ]; then read -r _last_path < <(\grep '^#PATH=' /run/replit/env/last | cut -f 2 -d =); fi
_user_components="$(\tr : $'\n' <<< "${PATH:-}" |\grep -xv -f <(\tr : $'\n' <<< "${_last_path}") |\tr $'\n' :)"
declare -gx PATH="${_user_components}${_new_path}"
declare -gx REPLIT_CLI=/nix/store/rv3hg5rqzmnl1775fsgjf4835mh182sa-pid1-0.0.1/bin/replit
declare -gx strictDeps=''
declare -gx doInstallCheck=''
declare -gx REPLIT_NIX_CHANNEL=stable-24_05
declare -gx REPL_LANGUAGE=nix
declare -gx REPLIT_DB_URL=https://kv.replit.com/v0/eyJhbGciOiJIUzUxMiIsImlzcyI6ImNvbm1hbiIsImtpZCI6InByb2Q6MSIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjb25tYW4iLCJleHAiOjE3NDMyNjEzNzEsImlhdCI6MTc0MzE0OTc3MSwiZGF0YWJhc2VfaWQiOiIwZTk5ZmEwOC03ODg4LTQyZDMtYTkwYS1iNjA4ODE0NTE3ZmUifQ._TlrD3Ux7WCn71dxnZbUNZujRvgEaShWTcM3SamZDFvHWvYA9lAyzKEKplttvlfS1xC4tRHAT1lKaIytManBmQ
declare -gx shellHook=''
declare -gx depsBuildTargetPropagated=''
declare -gx REPLIT_RTLD_LOADER=1
declare -gx out=/nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell
declare -gx propagatedBuildInputs=''
declare -gx stdenv=/nix/store/xfhkjnpqjwlf6hlk1ysmq3aaq80f3bjj-stdenv-linux
declare -gx LD=ld
declare -gx __structuredAttrs=''
declare -gx REPLIT_RIPPKGS_INDICES=/nix/store/l5gcmdp908sji4wchfp8csflhjcgnmm3-rippkgs-indices
declare -gx REPLIT_DEV_DOMAIN=0e99fa08-7888-42d3-a90a-b608814517fe-00-10pgi1sgukcwk.janeway.replit.dev
declare -gx REPL_HOME=/home/runner/workspace
declare -gx system=x86_64-linux
declare -gx __ETC_PROFILE_SOURCED=1
declare -gx SOURCE_DATE_EPOCH=315532800
declare -gx REPL_OWNER_ID=77672
declare -gx shell=/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash
declare -gx configureFlags=''
declare -gx REPLIT_PID1_VERSION=0.0.0-2f2097b
declare -gx NIXPKGS_ALLOW_UNFREE=1
declare -gx REPLIT_CLUSTER=janeway
declare -gx NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow'
declare -gx NIX_STORE=/nix/store
declare -gx NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
declare -gx propagatedNativeBuildInputs=''
declare -gx NIX_CFLAGS_COMPILE=' -frandom-seed=yf3p5xmdpd -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include'
declare -gx NIX_BUILD_CORES=4
declare -gx COLORTERM=truecolor
declare -gx nativeBuildInputs=''
declare -gx outputs=out
declare -gx REPLIT_LD_LIBRARY_PATH=/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib:/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib:/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib
declare -gx HOME=/home/runner
declare -gx DOCKER_CONFIG=/home/runner/workspace/.config/docker
declare -gx NIX_PATH=nixpkgs=/home/runner/.nix-defexpr/channels/nixpkgs-stable-24_05:/home/runner/.nix-defexpr/channels
declare -gx PROMPT_DIRTRIM=2
declare -gx NIX_ENFORCE_NO_NATIVE=1
declare -gx DISPLAY=:0
declare -gx NIX_LDFLAGS='-rpath /nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell/lib  -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib'
declare -gx depsHostHostPropagated=''
declare -gx REPL_PUBKEYS='{"crosis-ci":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","crosis-ci:1":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","crosis-ci:latest":"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=","prod":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","prod:1":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","prod:2":"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=","prod:3":"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=","prod:4":"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=","prod:5":"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=","prod:latest":"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=","vault-goval-token":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=","vault-goval-token:1":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=","vault-goval-token:latest":"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E="}'
declare -gx REPL_OWNER=phuaky
declare -gx depsBuildBuild=''
declare -gx depsTargetTargetPropagated=''
declare -gx REPLIT_BASHRC=/nix/store/s4lshwgjxfy4lmilpjpg82swj27lb9ql-replit-bashrc/bashrc
declare -gx REPL_IDENTITY=v2.public.Q2lRd1pUazVabUV3T0MwM09EZzRMVFF5WkRNdFlUa3dZUzFpTmpBNE9ERTBOVEUzWm1VU0JuQm9kV0ZyZVJvTVRsTXRVbWxrWlZOb1lYSmxJaVF3WlRrNVptRXdPQzAzT0RnNExUUXlaRE10WVRrd1lTMWlOakE0T0RFME5URTNabVU0Nk40RVdnOEtCMnBoYm1WM1lYa1NCSEJoYVdRPTRnRW6r3_U_FIJpHCS5BLY1Y0bacco1-5EGCtsirYjxapWgZ_Zyuhdn5ChCMQUdeZWjszDLymJsxITm0ykFzgQ.R0FFaUJtTnZibTFoYmhLQkNIWXlMbkIxWW14cFl5NVJNbVF6VTFoYVRWWXhjREprTVd4U1lVVnNWR0ZITVVKU1ZrNUZVVmRzVFdOWVJraE1NRXB2VVRGV2IwNXJaRnBSVmtwMlVUQmtRbFpYUmt0YU1qbHlWRlZrVms1Vk9WaFhiV2hPVWtka01GUnVjRzVPUlRsRVRVUkNUbUpXUmpaVVJtUkdUbFV4U0ZKWVVscGhiR3d6VkRCU2JtVkZOVVZXV0doUFRXeHdjMUl5Wkc1Vk1FcDFVVzA1YTFZd1dubGFWa3AyVWxVNVVHRnRWa05SYlRsTFUxZGthMk5XYkZoT1YzaHJUV3RaTVZJeVpGcGpWVXBKVVcxb2FGWXhSbkJVYkdSNlpWVjRkVkZxUmxwaVdHaDNWMWhyTVZWck1IbGlSWEJxWWtWd05GZHRjRXRTTVZwWFZteHNVbUpZYUVSVlZ6RktUVVprZEdKRmNGVldNRFZ2VkRGV05GWkhTbGhVYWtwcFpXMWpkMVV3Vm5aa01XUlhZa2hvVGxkSGVFdG9TMEUyYVZKQk9VOU1PSE5MY0haNmJtNHpXa2gxYTI5Nk1rMDRablJ2V1c5SU0zTkNiVGhVWldSVVdWQnVUMnBYVnpGQk1WZFJhRlpwUlZkelNXNTBOMlZ2VGtwcFZHRm9SeTFqYjAxR2VXeFZkVFJDWnk1U01FWkdZVlZLZEZSdVdtbGlWRVp2V1cxb1RWbHJSblZYV0d4TlltdEplRmRYTVRSalJtdzFUbFpLVG1KV1NUSldWRVpyVFVkV2RGTnNXbFJpYmtKWFZtMHhORlV4VW5KVmJVWk9WbTVDVjFVeWRFOVdSbHBaWVVWV1ZtVnJTbkpWYWtFeFUxWkdjbE5zV2s1U2JIQlRWbTF3VDFsWFVsZGlNMmhUWWxkb1UxWnFTbTlrVmxaWVpFZDBhV0pGTlZoWmExWlBWbTFLVldKRlZsWmhhMHBJV2tkNGMxWnNTblZTYkVwWFZsaENTbFl5Y0VOak1XUnpVbXhvYUZOR2NGTlVWV1JUVVRGYVIxcEZaRkppVlZwSlYydFZlRlV3TVhSVmEzUlhUVlphVkZWVVNrcGtNVkp5WVVaS1YyRXhjSFpXVmxwcllqSktjMVJ1U21sVFJWcFlXVzEwZDFReGJGZFZiR1JPVFZoQ1NGZHJWakJoYXpGeVYyeHNWMUp0YUZoV1JFWmhaRWRXU1dOR1pGZGlWa3BKVmtaU1MxUXlUWGxUYWxwV1lYcHNXRlJYZUV0aU1WbDVUVlJTVkUxcldrZFVWbFpyVmtkS1JsZHNXbHBXZWtVd1YxWmFjMDVzUmxWU2JYQnBVbGhDTmxaRVJsZFpWMFY1VTJ4c1ZsWkZXbGRaYTFwaFkyeHdTR1ZGV214U2JrSkdWakl4ZDJGSFJYaGpSemxYWVd0YVZGVjZSazVsUmxwelUyeEdWMUpGU2pOV01uUmhWMjFPZEdORk1WQlhSVFI2V2tWV1drNVdjRVZTV0ZKcFlsUldVVlF3WkdGVmJVcFlZVVJLVkZKV2NIaFdhMVp5WkVkU1JXRkZjR2xpVm5CUlYwUkplRlpWTVhSWmVsSnFWMGhDUmxWclpGWk9SbHBGWWtaU2FFMVdTalpYYlhodllsZFdjbUo2UWxoV1ZURTJWMjF6ZDJWc1pGWk9XRXBVVmtkU1dWZFhhM2RPVmtweVZXMDVUMkZVUmt4VWFrazFVa1Y0YzFOWVpGTmhNWEJ2Vm14V2QwMUdXa2hPVjBab1ZqQndWbFZ0TURWWGJVcFlWV3BLVm1GcmNGQlZNVnBQWkZaa2RGSnNUbE5sYldjdw
declare -gx NM=nm
declare -gx buildInputs='/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7 /nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev'
declare -gx REPLIT_PID1_FLAG_NIXMODULES_BEFORE_REPLIT_NIX=1
declare -gx XDG_DATA_HOME=/home/runner/workspace/.local/share
declare -gx REPLIT_LD_AUDIT=/nix/store/n5x1kgbz8zjh63ymsijbislyi1n1hir6-replit_rtld_loader-1/rtld_loader.so
declare -gx REPLIT_PID1_FLAG_REPLIT_RTLD_LOADER=1
declare -gx depsBuildTarget=''
declare -gx OBJDUMP=objdump
declare -gx _=/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin/env
declare -gx buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
declare -gx NIX_BINTOOLS=/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41
declare -gx USER=runner
declare -gx REPL_ID=0e99fa08-7888-42d3-a90a-b608814517fe
declare -gx REPLIT_DOMAINS=0e99fa08-7888-42d3-a90a-b608814517fe-00-10pgi1sgukcwk.janeway.replit.dev
declare -gx XDG_CACHE_HOME=/home/runner/workspace/.cache
declare -gx GIT_EDITOR=replit-git-editor
declare -gx depsTargetTarget=''
declare -gx depsHostHost=''
declare -gx LIBGL_DRIVERS_PATH=/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib/dri
declare -gx __EGL_VENDOR_LIBRARY_FILENAMES=/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/share/glvnd/egl_vendor.d/50_mesa.json
declare -gx builder=/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash
declare -gx OBJCOPY=objcopy
declare -gx RANLIB=ranlib
declare -gx LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
declare -gx REPL_SLUG=workspace
declare -gx preferLocalBuild=1
declare -gx AS=as
declare -gx STRINGS=strings
declare -gx LANG=en_US.UTF-8
declare -gx REPL_IMAGE=gcr.io/marine-cycle-160323/nix:bf8590a3e2f0a8b70b7ca175eeed9074dffbfca9
declare -gx XDG_CONFIG_HOME=/home/runner/workspace/.config
declare -gx patches=''
declare -gx REPLIT_SUBCLUSTER=paid
declare -gx READELF=readelf
declare -gx doCheck=''
declare -gx HOSTNAME=e017d925f100
declare -gx DIRENV_CONFIG=/etc/direnv
declare -gx SIZE=size
</file>

<file path=".cache/replit/env/latest.json">
{"environment":{"AR":"ar","AS":"as","CC":"gcc","COLORTERM":"truecolor","CONFIG_SHELL":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","CXX":"g++","DIRENV_CONFIG":"/etc/direnv","DISPLAY":":0","DOCKER_CONFIG":"/home/runner/workspace/.config/docker","GIT_ASKPASS":"replit-git-askpass","GIT_EDITOR":"replit-git-editor","HOME":"/home/runner","HOSTNAME":"e017d925f100","HOST_PATH":"/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin","LANG":"en_US.UTF-8","LD":"ld","LIBGL_DRIVERS_PATH":"/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib/dri","LOCALE_ARCHIVE":"/usr/lib/locale/locale-archive","NIXPKGS_ALLOW_UNFREE":"1","NIX_BINTOOLS":"/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41","NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu":"1","NIX_BUILD_CORES":"4","NIX_BUILD_TOP":"/tmp","NIX_CC":"/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0","NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu":"1","NIX_CFLAGS_COMPILE":" -frandom-seed=yf3p5xmdpd -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include","NIX_ENFORCE_NO_NATIVE":"1","NIX_HARDENING_ENABLE":"bindnow format fortify fortify3 pic relro stackprotector strictoverflow","NIX_LDFLAGS":"-rpath /nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell/lib  -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib","NIX_PATH":"nixpkgs=/home/runner/.nix-defexpr/channels/nixpkgs-stable-24_05:/home/runner/.nix-defexpr/channels","NIX_PROFILES":"/nix/var/nix/profiles/default /home/runner/.nix-profile","NIX_PS1":"\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ","NIX_STORE":"/nix/store","NM":"nm","OBJCOPY":"objcopy","OBJDUMP":"objdump","PATH":"/nix/store/0z5iwcvalafm3j2c5pfhllsfbxrbyzf4-postgresql-16.5/bin:/nix/store/r2wrscmjzn4f2f7wk7q2ms2h96mjwzv7-npx/bin:/home/runner/workspace/.config/npm/node_global/bin:/home/runner/workspace/node_modules/.bin:/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin:/nix/store/7zaapw8wkywsw9z5lkkk5k608xpn7wfl-bun-1.2.3/bin:/nix/store/z8s3r4vwf4r26g2d7shnw5lva6ihim8f-pnpm-9.15.0/bin:/nix/store/jcgdksj946l5l42c2y9ks2l4g6n74h3f-yarn-1.22.22/bin:/nix/store/2s17mrby0ph00z22rkabfs9vzpzx1r70-prettier-3.3.3/bin:/nix/store/rdd4pnr4x9rqc9wgbibhngv217w2xvxl-bash-interactive-5.2p26/bin:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/bin:/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin:/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0/bin:/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41/bin:/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41/bin:/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin:/nix/store/rmzzfy35ld8zk6ljb5vy9xdvwjic3r6y-pid1/bin:/nix/store/bcsji16g1szdg0j8znlvbkbfxpkvlgiz-replit-runtime-path/bin:/home/runner/.nix-profile/bin:/home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","PROMPT_DIRTRIM":"2","RANLIB":"ranlib","READELF":"readelf","REPLIT_BASHRC":"/nix/store/s4lshwgjxfy4lmilpjpg82swj27lb9ql-replit-bashrc/bashrc","REPLIT_CLI":"/nix/store/rv3hg5rqzmnl1775fsgjf4835mh182sa-pid1-0.0.1/bin/replit","REPLIT_CLUSTER":"janeway","REPLIT_DB_URL":"https://kv.replit.com/v0/eyJhbGciOiJIUzUxMiIsImlzcyI6ImNvbm1hbiIsImtpZCI6InByb2Q6MSIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjb25tYW4iLCJleHAiOjE3NDMyNjEzNzEsImlhdCI6MTc0MzE0OTc3MSwiZGF0YWJhc2VfaWQiOiIwZTk5ZmEwOC03ODg4LTQyZDMtYTkwYS1iNjA4ODE0NTE3ZmUifQ._TlrD3Ux7WCn71dxnZbUNZujRvgEaShWTcM3SamZDFvHWvYA9lAyzKEKplttvlfS1xC4tRHAT1lKaIytManBmQ","REPLIT_DEV_DOMAIN":"0e99fa08-7888-42d3-a90a-b608814517fe-00-10pgi1sgukcwk.janeway.replit.dev","REPLIT_DOMAINS":"0e99fa08-7888-42d3-a90a-b608814517fe-00-10pgi1sgukcwk.janeway.replit.dev","REPLIT_ENVIRONMENT":"production","REPLIT_LD_AUDIT":"/nix/store/n5x1kgbz8zjh63ymsijbislyi1n1hir6-replit_rtld_loader-1/rtld_loader.so","REPLIT_LD_LIBRARY_PATH":"/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib:/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib:/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib","REPLIT_NIX_CHANNEL":"stable-24_05","REPLIT_PID1_FLAG_NIXMODULES_BEFORE_REPLIT_NIX":"1","REPLIT_PID1_FLAG_REPLIT_RTLD_LOADER":"1","REPLIT_PID1_VERSION":"0.0.0-2f2097b","REPLIT_RIPPKGS_INDICES":"/nix/store/l5gcmdp908sji4wchfp8csflhjcgnmm3-rippkgs-indices","REPLIT_RTLD_LOADER":"1","REPLIT_SUBCLUSTER":"paid","REPL_HOME":"/home/runner/workspace","REPL_ID":"0e99fa08-7888-42d3-a90a-b608814517fe","REPL_IDENTITY":"v2.public.Q2lRd1pUazVabUV3T0MwM09EZzRMVFF5WkRNdFlUa3dZUzFpTmpBNE9ERTBOVEUzWm1VU0JuQm9kV0ZyZVJvTVRsTXRVbWxrWlZOb1lYSmxJaVF3WlRrNVptRXdPQzAzT0RnNExUUXlaRE10WVRrd1lTMWlOakE0T0RFME5URTNabVU0Nk40RVdnOEtCMnBoYm1WM1lYa1NCSEJoYVdRPTRnRW6r3_U_FIJpHCS5BLY1Y0bacco1-5EGCtsirYjxapWgZ_Zyuhdn5ChCMQUdeZWjszDLymJsxITm0ykFzgQ.R0FFaUJtTnZibTFoYmhLQkNIWXlMbkIxWW14cFl5NVJNbVF6VTFoYVRWWXhjREprTVd4U1lVVnNWR0ZITVVKU1ZrNUZVVmRzVFdOWVJraE1NRXB2VVRGV2IwNXJaRnBSVmtwMlVUQmtRbFpYUmt0YU1qbHlWRlZrVms1Vk9WaFhiV2hPVWtka01GUnVjRzVPUlRsRVRVUkNUbUpXUmpaVVJtUkdUbFV4U0ZKWVVscGhiR3d6VkRCU2JtVkZOVVZXV0doUFRXeHdjMUl5Wkc1Vk1FcDFVVzA1YTFZd1dubGFWa3AyVWxVNVVHRnRWa05SYlRsTFUxZGthMk5XYkZoT1YzaHJUV3RaTVZJeVpGcGpWVXBKVVcxb2FGWXhSbkJVYkdSNlpWVjRkVkZxUmxwaVdHaDNWMWhyTVZWck1IbGlSWEJxWWtWd05GZHRjRXRTTVZwWFZteHNVbUpZYUVSVlZ6RktUVVprZEdKRmNGVldNRFZ2VkRGV05GWkhTbGhVYWtwcFpXMWpkMVV3Vm5aa01XUlhZa2hvVGxkSGVFdG9TMEUyYVZKQk9VOU1PSE5MY0haNmJtNHpXa2gxYTI5Nk1rMDRablJ2V1c5SU0zTkNiVGhVWldSVVdWQnVUMnBYVnpGQk1WZFJhRlpwUlZkelNXNTBOMlZ2VGtwcFZHRm9SeTFqYjAxR2VXeFZkVFJDWnk1U01FWkdZVlZLZEZSdVdtbGlWRVp2V1cxb1RWbHJSblZYV0d4TlltdEplRmRYTVRSalJtdzFUbFpLVG1KV1NUSldWRVpyVFVkV2RGTnNXbFJpYmtKWFZtMHhORlV4VW5KVmJVWk9WbTVDVjFVeWRFOVdSbHBaWVVWV1ZtVnJTbkpWYWtFeFUxWkdjbE5zV2s1U2JIQlRWbTF3VDFsWFVsZGlNMmhUWWxkb1UxWnFTbTlrVmxaWVpFZDBhV0pGTlZoWmExWlBWbTFLVldKRlZsWmhhMHBJV2tkNGMxWnNTblZTYkVwWFZsaENTbFl5Y0VOak1XUnpVbXhvYUZOR2NGTlVWV1JUVVRGYVIxcEZaRkppVlZwSlYydFZlRlV3TVhSVmEzUlhUVlphVkZWVVNrcGtNVkp5WVVaS1YyRXhjSFpXVmxwcllqSktjMVJ1U21sVFJWcFlXVzEwZDFReGJGZFZiR1JPVFZoQ1NGZHJWakJoYXpGeVYyeHNWMUp0YUZoV1JFWmhaRWRXU1dOR1pGZGlWa3BKVmtaU1MxUXlUWGxUYWxwV1lYcHNXRlJYZUV0aU1WbDVUVlJTVkUxcldrZFVWbFpyVmtkS1JsZHNXbHBXZWtVd1YxWmFjMDVzUmxWU2JYQnBVbGhDTmxaRVJsZFpWMFY1VTJ4c1ZsWkZXbGRaYTFwaFkyeHdTR1ZGV214U2JrSkdWakl4ZDJGSFJYaGpSemxYWVd0YVZGVjZSazVsUmxwelUyeEdWMUpGU2pOV01uUmhWMjFPZEdORk1WQlhSVFI2V2tWV1drNVdjRVZTV0ZKcFlsUldVVlF3WkdGVmJVcFlZVVJLVkZKV2NIaFdhMVp5WkVkU1JXRkZjR2xpVm5CUlYwUkplRlpWTVhSWmVsSnFWMGhDUmxWclpGWk9SbHBGWWtaU2FFMVdTalpYYlhodllsZFdjbUo2UWxoV1ZURTJWMjF6ZDJWc1pGWk9XRXBVVmtkU1dWZFhhM2RPVmtweVZXMDVUMkZVUmt4VWFrazFVa1Y0YzFOWVpGTmhNWEJ2Vm14V2QwMUdXa2hPVjBab1ZqQndWbFZ0TURWWGJVcFlWV3BLVm1GcmNGQlZNVnBQWkZaa2RGSnNUbE5sYldjdw","REPL_IDENTITY_KEY":"k2.secret.SentdmN1teNuupVoqhLfiP6WnmZ1ys0jYBcjNZBDQuJDeIitGp_YVRRcGUEFvhmIgxxr0tKZy-jzgcnRhirXIg","REPL_IMAGE":"gcr.io/marine-cycle-160323/nix:bf8590a3e2f0a8b70b7ca175eeed9074dffbfca9","REPL_LANGUAGE":"nix","REPL_OWNER":"phuaky","REPL_OWNER_ID":"77672","REPL_PUBKEYS":"{\"crosis-ci\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"crosis-ci:1\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"crosis-ci:latest\":\"7YlpcYh82oR9NSTtSYtR5jDL4onNzCGJGq6b+9CuZII=\",\"prod\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"prod:1\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"prod:2\":\"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=\",\"prod:3\":\"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=\",\"prod:4\":\"8uGN+vfszlnV93/HCSHlVLG0xddMlPkir1Ni4JKT4+w=\",\"prod:5\":\"9+MCOSHQSQlcodXoot8dC8NLhc862nLkx1/VMsbY2h8=\",\"prod:latest\":\"tGsjlu/BJvWTgvMaX7acuUb7AO1dXOrRiuk7y083RFE=\",\"vault-goval-token\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\",\"vault-goval-token:1\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\",\"vault-goval-token:latest\":\"D5jJoMx1Ml54HM92NLgXl+MzptwDqbSsfyFG6f52g9E=\"}","REPL_SLUG":"workspace","SIZE":"size","SOURCE_DATE_EPOCH":"315532800","STRINGS":"strings","STRIP":"strip","USER":"runner","XDG_CACHE_HOME":"/home/runner/workspace/.cache","XDG_CONFIG_HOME":"/home/runner/workspace/.config","XDG_DATA_DIRS":"/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/share:/nix/store/bcsji16g1szdg0j8znlvbkbfxpkvlgiz-replit-runtime-path/share","XDG_DATA_HOME":"/home/runner/workspace/.local/share","_":"/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin/env","__EGL_VENDOR_LIBRARY_FILENAMES":"/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/share/glvnd/egl_vendor.d/50_mesa.json","__ETC_PROFILE_SOURCED":"1","__structuredAttrs":"","buildInputs":"/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7 /nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev","buildPhase":"{ echo \"------------------------------------------------------------\";\n  echo \" WARNING: the existence of this path is not guaranteed.\";\n  echo \" It is an internal implementation detail for pkgs.mkShell.\";\n  echo \"------------------------------------------------------------\";\n  echo;\n  # Record all build inputs as runtime dependencies\n  export;\n} \u003e\u003e \"$out\"\n","builder":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","cmakeFlags":"","configureFlags":"","depsBuildBuild":"","depsBuildBuildPropagated":"","depsBuildTarget":"","depsBuildTargetPropagated":"","depsHostHost":"","depsHostHostPropagated":"","depsTargetTarget":"","depsTargetTargetPropagated":"","doCheck":"","doInstallCheck":"","mesonFlags":"","nativeBuildInputs":"","npm_config_prefix":"/home/runner/workspace/.config/npm/node_global","out":"/nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell","outputs":"out","patches":"","phases":"buildPhase","preferLocalBuild":"1","propagatedBuildInputs":"","propagatedNativeBuildInputs":"","shell":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","shellHook":"","stdenv":"/nix/store/xfhkjnpqjwlf6hlk1ysmq3aaq80f3bjj-stdenv-linux","strictDeps":"","system":"x86_64-linux"}}
</file>

<file path=".cache/replit/modules/nodejs-20.res">
{"type":"resolve","resolvedModuleId":"nodejs-20","inputHash":"","resolutionPath":["nodejs-20"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/postgresql-16.res">
{"type":"resolve","resolvedModuleId":"postgresql-16","inputHash":"","resolutionPath":["postgresql-16"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/replit.res">
{"type":"resolve","resolvedModuleId":"replit","inputHash":"","resolutionPath":["replit"],"error":"","Changed":true}
</file>

<file path=".cache/replit/modules/web.res">
{"type":"resolve","resolvedModuleId":"web","inputHash":"","resolutionPath":["web"],"error":"","Changed":true}
</file>

<file path=".cache/replit/nix/env.json">
{"entries":{"replit.nix":{"env":{"AR":"ar","AS":"as","CC":"gcc","CONFIG_SHELL":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","CXX":"g++","HOST_PATH":"/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin","LD":"ld","LIBGL_DRIVERS_PATH":"/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib/dri","LOCALE_ARCHIVE":"/usr/lib/locale/locale-archive","NIX_BINTOOLS":"/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41","NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu":"1","NIX_BUILD_CORES":"4","NIX_BUILD_TOP":"/tmp","NIX_CC":"/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0","NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu":"1","NIX_CFLAGS_COMPILE":" -frandom-seed=yf3p5xmdpd -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include -isystem /nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/include -isystem /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev/include -isystem /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev/include -isystem /nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev/include -isystem /nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev/include","NIX_ENFORCE_NO_NATIVE":"1","NIX_HARDENING_ENABLE":"bindnow format fortify fortify3 pic relro stackprotector strictoverflow","NIX_LDFLAGS":"-rpath /nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell/lib  -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib -L/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/lib -L/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib -L/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib -L/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib -L/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2/lib -L/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib/lib -L/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib","NIX_STORE":"/nix/store","NM":"nm","OBJCOPY":"objcopy","OBJDUMP":"objdump","PATH":"/nix/store/rdd4pnr4x9rqc9wgbibhngv217w2xvxl-bash-interactive-5.2p26/bin:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/bin:/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin:/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0/bin:/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41/bin:/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41/bin:/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7/bin:/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin/bin:/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69/bin:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin","RANLIB":"ranlib","READELF":"readelf","REPLIT_LD_LIBRARY_PATH":"/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib/lib:/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/lib:/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0/lib:/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0/lib","SIZE":"size","SOURCE_DATE_EPOCH":"315532800","STRINGS":"strings","STRIP":"strip","XDG_DATA_DIRS":"/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/share","_":"/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin/env","__EGL_VENDOR_LIBRARY_FILENAMES":"/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers/share/glvnd/egl_vendor.d/50_mesa.json","__ETC_PROFILE_SOURCED":"1","__structuredAttrs":"","buildInputs":"/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7 /nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers /nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev /nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev","buildPhase":"{ echo \"------------------------------------------------------------\";\n  echo \" WARNING: the existence of this path is not guaranteed.\";\n  echo \" It is an internal implementation detail for pkgs.mkShell.\";\n  echo \"------------------------------------------------------------\";\n  echo;\n  # Record all build inputs as runtime dependencies\n  export;\n} \u003e\u003e \"$out\"\n","builder":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","cmakeFlags":"","configureFlags":"","depsBuildBuild":"","depsBuildBuildPropagated":"","depsBuildTarget":"","depsBuildTargetPropagated":"","depsHostHost":"","depsHostHostPropagated":"","depsTargetTarget":"","depsTargetTargetPropagated":"","doCheck":"","doInstallCheck":"","mesonFlags":"","nativeBuildInputs":"","out":"/nix/store/yf3p5xmdpdvjjsa0c5g63q3jhhgwrryp-nix-shell","outputs":"out","patches":"","phases":"buildPhase","preferLocalBuild":"1","propagatedBuildInputs":"","propagatedNativeBuildInputs":"","shell":"/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash","shellHook":"","stdenv":"/nix/store/xfhkjnpqjwlf6hlk1ysmq3aaq80f3bjj-stdenv-linux","strictDeps":"","system":"x86_64-linux"},"dependencies":[{"path":"replit.nix","mod_time":"2025-03-07T09:48:13.603596869Z"}],"closure":["/nix/store/1q9vc0lq7qjlfjz47mfmlzdf86c543jy-xgcc-13.2.0-libgcc","/nix/store/yfp7dr8m7zi7kxk49wd714gwvhb105hf-libunistring-1.1","/nix/store/ic63ay0py10fyryaw7345k4ps32da33w-libidn2-2.3.7","/nix/store/k7zgvzp2r31zkg9xqgjim7mbknryv6bs-glibc-2.39-52","/nix/store/lv6nackqis28gg7l2ic43f6nk52hb39g-zlib-1.3.1","/nix/store/y5p181lnbh8rrwd3ljp83k0cn3xklyk2-sqlite-3.45.3","/nix/store/05n35k0p8l969kfskxqhbqhy8il3a3cq-util-linux-minimal-2.40.1-lib","/nix/store/gp504m4dvw5k2pdx6pccf1km79fkcwgf-openssl-3.0.13","/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26","/nix/store/qannz09m66qpcy3ny1f4nkl4ql0g71ks-openssl-3.0.13-bin","/nix/store/191vca5vdxdlr32k2hpzd66mic98930f-openssl-3.0.13-dev","/nix/store/af9bsxhqip4jpf6qb3g99vxb23f3abik-ncurses-6.4-man","/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4","/nix/store/1c9jq1csrx42g5vqynlfl0x63k2nx1x9-ncurses-6.4-dev","/nix/store/g222zncwmspvsj2cfwcl74f6hbfal0cz-find-xml-catalogs-hook","/nix/store/kf7fzax0av9him9m4zcmbqmihh5108wq-libxml2-2.12.7","/nix/store/p3109b71w6xbc9zdj2gdmdy1iri50311-libxml2-2.12.7-bin","/nix/store/qj9byzfvh7dd61kk0aglj7cwqj1xqg6l-zlib-1.3.1-dev","/nix/store/37979sqc7yw9ps0c4xl9jjkhq0w1hw8b-libxml2-2.12.7-dev","/nix/store/4n8fsrg6kslmnq5g2xsrs6vmpqfbyz2m-readline-8.2p10","/nix/store/0vcrqaqf5sk158xy77mcl52374c1dlbi-keyutils-1.6.3-lib","/nix/store/5pcy995yarjy7bfdswgkfggbzg48dlq0-libkrb5-1.21.2","/nix/store/193fnfad15rgch01xxg7vf81rmmfwp8w-libgpg-error-1.48","/nix/store/59q5nl573y3znmwqqaw91m0crrss2vgd-npth-1.7","/nix/store/6c947fh1y2ln5cr8kpcl14b3hfnni0av-libgcrypt-1.10.3","/nix/store/vwzyblmr6md6jimsb4lfhig0qmr9j991-libassuan-2.5.7","/nix/store/0vjmplyvp26dc08j6bfff8y4ajmwmnlc-gnupg-2.4.5","/nix/store/bqznkfzv8dy1c4ngp6nnhrcxsprdsbh0-publicsuffix-list-0-unstable-2024-01-07","/nix/store/2vqgx0si98m8c3yd2fhspmikavf3nvmd-libpsl-0.21.5","/nix/store/0rxb3ixzk4zaqivc9s795m0a3679wbw2-gcc-13.2.0-libgcc","/nix/store/xvzz97yk73hw03v5dhhz3j47ggwf1yq1-gcc-13.2.0-lib","/nix/store/by853zqacqy647v0z7l70xm77xl9ifal-zstd-1.5.6","/nix/store/jpjmh2325b6k3svvsmhj57wqlph9srdx-brotli-1.1.0-lib","/nix/store/kw1nc4sg6hp550z8g8pdjb3d3ixz4m3l-nghttp2-1.61.0-lib","/nix/store/vrqy1mn0nw6g6y0w22gipbspknnwr9q5-libssh2-1.11.0","/nix/store/36kr91f8s509z2r8hqvpayw5bqyqgyzr-curl-8.7.1","/nix/store/ggsvk22xykxpsqznqipvr6lfl31qzslg-glibc-2.39-52-getent","/nix/store/5ln5j8ix4fxzvs4f21pkkp3ky56wk7rh-getent-glibc-2.39-52","/nix/store/5xynf9c9ml7d97q70kpq9rpqqmx13xl8-libxcrypt-4.4.36","/nix/store/d857vkjzr4rf68ycyfkcpdiax6v4d3c0-libtasn1-4.19.0","/nix/store/kbg5m7fyi1w23fyfmxjhhzcbd577rpg0-libffi-3.4.6","/nix/store/771mz0x86qzhlphd22awf3s601mhwpkv-p11-kit-0.25.3","/nix/store/83jfjv2b6cc33jv7q1lvvd846crkd0wh-libseccomp-2.5.5-lib","/nix/store/8anib06b270c8k62fglw6dimnwivrcvy-db-4.8.30","/nix/store/cz3qp4hxqxcwcyx04cajvjhy388dhw2q-audit-3.1.2","/nix/store/b6bgs55kyriqndagqzck1v7w8ip9dzzn-linux-pam-1.6.1","/nix/store/iia4qvk02272cvfq4lfww1a48fpk08ml-cracklib-2.9.11","/nix/store/86gmcmapjs9kdkpxvxcimq0aq8ha921q-libpwquality-1.4.5-lib","/nix/store/lphbn1va4i43fj7f3m9xskf9y86khzf3-xz-5.4.6","/nix/store/9amlz11vfaczjwjqbmsyql7kvd2bns9w-kmod-31","/nix/store/9wkzjgwdzivacwi50s6xvg6wxd1rc0s4-lz4-1.9.4","/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin","/nix/store/g3vi60zgyjsvij7xkk6dxky1hkwh0ynd-pcre2-10.43","/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11","/nix/store/hxhdhc0zddbhmqvv99nldq2gfmy9983x-zstd-1.5.6-bin","/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13","/nix/store/xwcf1rw3ackqp2vxms9myf9jq2ny6ynv-bzip2-1.0.8","/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin","/nix/store/5nk2ga7i2f030am4qpcdsd8qlk6i3z83-attr-2.5.2","/nix/store/7ivacs3m2fm19hyxdmrs05xisj82v6y5-gmp-with-cxx-6.3.0","/nix/store/mjgi65m3hgzqqvqcix848gskkw5zzwi9-acl-2.3.2","/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5","/nix/store/c834fr2k0c3g8a3s97qilfc5q8z0mxxz-kbd-2.6.4","/nix/store/cibpmwf213v9adwh09pg2kk92xzgp39l-kexec-tools-2.0.28","/nix/store/g1iia7k8ahhmg8590cy5dm13gdg7mrz4-qrencode-4.1.1","/nix/store/wj863gr3vmxmm2ln6n52nkqmrwx75jg3-json-c-0.17","/nix/store/hw6nhpg3n3wwbvlraw40y3af5dkwl1l1-tpm2-tss-4.1.1","/nix/store/br26gam6kclf8yydzbj1wna2assyx3dm-libmnl-1.0.5","/nix/store/brm3iyn8hzixjh7rfhdqm6n2sy9kxnjd-libnftnl-1.2.6","/nix/store/whbs2x9f2nrxbzcrcla5a7pr5mvdqf98-libnl-3.8.0","/nix/store/dc36aapzjrqiyh4zzsh6ilwidcfs5xga-libpcap-1.10.4","/nix/store/x49fq9q91icvhs7drn92isz3lir2ybxs-libnfnetlink-1.0.2","/nix/store/zli13vajyx4a3vjnja0pd0irhdk7a34k-libnetfilter_conntrack-1.0.9","/nix/store/isqrn21fmha9dxf1bbl4mm7j6irpw1x8-iptables-1.8.10","/nix/store/r20kl3djvc3r5w5a0gwy4d896mn6b22a-elfutils-0.191","/nix/store/m8dz4ij709536xzxn8prgg2a3jc0s3j6-libbpf-1.4.2","/nix/store/rx6nkd40819acppajq29g1hxa4d9r35f-gmp-with-cxx-6.3.0","/nix/store/cfgpxq64il1sfsjqbblghds82jf2a185-nettle-3.9.1","/nix/store/qr0d05pw8cpznhrq4kfyz64pcm6xppcq-libevent-2.1.12","/nix/store/6ff9abnxvgpii09zrjbrv5vcjgbhqk61-unbound-1.20.0-lib","/nix/store/v0d8k5by479gzc9yfdnvw63m0jzcppjk-dns-root-data-2023-11-27","/nix/store/wf7w1vbis4fphasyn4z3vad6336rxc64-gnutls-3.8.5","/nix/store/n7nbsn0d6w5m60hqnr7af8gzshnynx5y-libmicrohttpd-0.9.77","/nix/store/yvhyhcfhc98wm86pw4ygk5jdr804iwrw-libcap-2.69-lib","/nix/store/7j8mbhf7c3sigq7lwl5vc5h7lhx34m6d-systemd-minimal-libs-255.6","/nix/store/jjzrf6hcd65vf9kpqbri6dlmsv7yj199-libcbor-0.11.0","/nix/store/y418s044ij61yx03rpnc0hja07snbp2h-pcsclite-2.1.0-lib","/nix/store/nkg8ikby80sv07z4qcag77w0h8zl24s0-libfido2-1.14.0","/nix/store/r2q8hr14sxaijryjc2xw5gqvfyhcfhpq-kmod-31-lib","/nix/store/rdd4pnr4x9rqc9wgbibhngv217w2xvxl-bash-interactive-5.2p26","/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35","/nix/store/s0vz12hrphzlc45sj1fp6cc45c75kr8x-util-linux-minimal-2.40.1-swap","/nix/store/s3i30zgs08s2a5azm8jzimyvl4yhpw1n-util-linux-minimal-2.40.1-mount","/nix/store/y2ds7vvhg0fsy8gf55q4x1hxjw3xkjp6-libapparmor-3.1.7","/nix/store/ygmngxklhr4iw8myam49ld30mfansylv-util-linux-minimal-2.40.1-login","/nix/store/4ccjj4v7vc782xc3ljjq2zfqj3d3l276-lvm2-2.03.23-lib","/nix/store/kflbjsv5gk1vimv0z54damzsqxrrkbf5-libargon2-20190702","/nix/store/yi5kdmy956hbvqrvmsi2qxykks4fhnad-cryptsetup-2.7.1","/nix/store/xjiifrz7ha6s29gp0p0j3w0155phxmia-systemd-255.6","/nix/store/8jwrkvi3r40a2fh56qk6bippnhzxcv03-systemd-255.6-dev","/nix/store/9ynakmwsf7nqhlv3phl05yybc5ad754l-zstd-1.5.6-dev","/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin","/nix/store/wfnfsglf5zw13slpplsg3nqqlazri1vk-lz4-1.9.4-bin","/nix/store/ks2x6si7bkxb6ay1s80ld1s5997qllpa-lz4-1.9.4-dev","/nix/store/lvq4hib247ayxib31hp7gryx444m1l3a-icu4c-73.2","/nix/store/qhzjjjcb0svqrvps9vv5hhihcs7r610x-readline-8.2p10-dev","/nix/store/x4z4n4270bqh5549b78xb5yzik9c77xi-libossp-uuid-1.6.2","/nix/store/xb4h083j02mr2ix7pgj7iawxh2hk100l-postgresql-15.7-lib","/nix/store/xfasa18vkp6pkld7wr9svjd75yz1ib8b-libkrb5-1.21.2-dev","/nix/store/y6hmqbmbwq0rmx1fzix5c5jszla2pzmp-tzdata-2024a","/nix/store/zfi1y943q15js1ysgl4vk6lp2bzrngn2-icu4c-73.2-dev","/nix/store/07s64wxjzk6z1glwxvl3yq81vdn42k40-postgresql-15.7","/nix/store/0bm4z6dh3v6nnr539xzsak0pn4wccb5l-expat-2.6.2","/nix/store/k3rllmlx64awzszan2d17kyl9mb8p3pr-alsa-topology-conf-1.2.5.1","/nix/store/xdb66yb8cqghrrc8j8rgpr31mhdmyp0m-alsa-ucm-conf-1.2.11","/nix/store/0g7r7krqiz6g3nb3651sfa5myd9gqkzf-alsa-lib-1.2.11","/nix/store/1sffjkg6c6ff16fz5yr0pnz3j7vja42h-ed-1.20.2","/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6","/nix/store/ls108c83hxrwzj922hhxf88rq53z10vq-gmp-6.3.0","/nix/store/hhr2s52vw5wdhlwcc60imbc85pi31121-mpfr-4.2.1","/nix/store/cya37dqm7s6jg5alb77n8y3c421k0xbi-libmpc-1.3.1","/nix/store/xz8mzas29lck99m79q211n0v5h1cmd40-linux-headers-6.7","/nix/store/fwh4fxd747m0py3ib3s5abamia9nrf90-glibc-2.39-52-dev","/nix/store/x8l5i68xcy2iyr0gwy71s1f0mh8s5c33-isl-0.20","/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0","/nix/store/8n7i76nx0k6b0zz752lvd3rv8gym39da-libXau-1.0.11","/nix/store/m7v406dmjc4pzd0qgbhw58d5gswcv412-libXdmcp-1.1.5","/nix/store/18kar5zwp16xyppfmigq92xzm1pkcqf1-libxcb-1.17.0","/nix/store/1iscdpbd3x9x3s3s25jd5ppl7yra0b77-perl-5.38.2","/nix/store/x9fw7rbdb34gq0f8q750kw344lbv9nk1-libX11-1.8.9","/nix/store/1jjjvxa4v0qqjhlc9ig3j6ljdlskm2kr-libXfixes-6.0.1","/nix/store/3bsk1131lgpvp0amxml4adnb8m5p18nk-fftw-single-3.3.10","/nix/store/4i0j14zymvlngyyhq2254f4g9m9my98y-gnu-config-2024-01-01","/nix/store/5frkz5kp1p3i6wfgcjgbba38pypg4app-libselinux-3.6","/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh","/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9","/nix/store/79fnxa6j0ylcx8xjmgxhjlskbmz4wnxq-hwdata-0.382","/nix/store/bsv4wkwiqgns5w83hayd8n9msclr7qgb-mpdecimal-4.0.0","/nix/store/ncqv9zy0avac3698klhzqk6v68jk1ldp-gdbm-1.23","/nix/store/zk9ybjjixdwyv3jmpg2i7s8p7iqi5vhh-mailcap-2.1.53","/nix/store/7hnr99nxrd2aw6lghybqdmkckq60j6l9-python3-3.11.9","/nix/store/7qzq8wm0z1mqrg8b4j2ibh3rgc5s8shp-lm-sensors-3.6.0","/nix/store/7rnc20sb0h5zxqm5vims6mvi6gr3iy27-wayland-1.22.0","/nix/store/84zsh6pcqi8qvl598lksrf10hmk8f8pq-sbc-2.0","/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2","/nix/store/j3svbki41ax01mhd0bax91y1q8gvc5c4-binutils-2.41-lib","/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41","/nix/store/pqajcwpmpr0jspa4z8xhxxnnfqfy5al4-expand-response-params","/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41","/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0","/nix/store/c2v6ycn0sjcpx9ww8x7j4ima6xnpssry-glib-2.80.2","/nix/store/d32cfv8wml1cgbkqj54khlhgdaca409d-webrtc-audio-processing-1.3","/nix/store/g19314860ijffhbksw25pl2rcagk7wcx-dconf-0.40.0-lib","/nix/store/gsxhddisz2211yzih47vskgabv0ry51x-libtool-2.4.7-lib","/nix/store/bp74x3bkh8979gxz72wc9hq3jb0hdaq7-systemd-minimal-255.6","/nix/store/jd41k79l3nxq4b7b7yvc0kmcjd3lq7sa-dbus-1.14.10-lib","/nix/store/jqzfi4vsxvkdcr52frs1qgiawbp9vpqg-libasyncns-0.8","/nix/store/q1fsrgy54qq6shp6hrrjxgvn06mphs32-speexdsp-1.2.1","/nix/store/lfpszg9pqbl4g5gwif16kq5sshv1qcd2-libogg-1.3.5","/nix/store/a1vdbxij9xn9i2qs695rlcn3jkwpldd2-flac-1.4.3","/nix/store/d1g6mz24zwx4pcl1wfwja6lgbf8x0m8d-libvorbis-1.3.7","/nix/store/ds2h2v0frms447yhg9cgyk78mrp5240a-libmpg123-1.32.6","/nix/store/l738rl0x75xhna5qy2g2nww6i8nwzacf-lame-3.100-lib","/nix/store/mxg79hhk4dgv0lnifhj6k9jgk7xrkcsd-libopus-1.5.2","/nix/store/rv8x9609d5nh5z8v7v9gmhy6z1wnrhkk-libsndfile-1.2.2","/nix/store/wws29jxqkf3zwg2i97jdgfcwk8mdxld0-soxr-0.1.3","/nix/store/pn9glkalcj7i5p549dpsl1c46pkb13xr-pulseaudio-17.0","/nix/store/cnnmb3axmv43lj22gny3m4hj06i1nc7c-libcap-2.69","/nix/store/ha8rh8jg19r8418baa8ps9b9kvd6szcf-attr-2.5.2-bin","/nix/store/nn78wg4rgns62w5sfzyxashxizd0lfva-attr-2.5.2-dev","/nix/store/xslrgzkvciny0m0cqbgq4bnvydvpdkgx-libcap-2.69-dev","/nix/store/a83znbrflv30lvhww0d2rljbyd5mw0c0-pulseaudio-17.0-dev","/nix/store/ax9wbqknwawnl21kvkp8l6jn2r6q0l90-llvm-17.0.6-lib","/nix/store/vz0rlaa0i7r61ivhvpyjcrbianai35yp-libpciaccess-0.18.1","/nix/store/y31zz9k1v2gqlzrs7p50llx8db6m2gdr-libdrm-2.4.120","/nix/store/f3bmrmcdxxgxzsh8pgwg49z2zhfs9qfq-mesa-24.0.7","/nix/store/gbjygp4wz7b5rgayckmqfc00hy34dqfn-libXext-1.3.6","/nix/store/hzwxpkddjfp13ghbbl4bn7zvqvkp7hpl-libxshmfence-1.3.2","/nix/store/iywcnxgdigcjq4skkdpnvqqxqalh3k20-libXxf86vm-1.1.5","/nix/store/yhqxq6b64s489xibfdrhq351k0rhsr1y-vulkan-loader-1.3.283.0","/nix/store/hggpnywm6l7cfh2ml1ynm50ap9x4f9rn-mesa-24.0.7-drivers","/nix/store/jz3vvf4nsyirb25rh9dbhksm4gq6wybb-libglvnd-1.7.0","/nix/store/smacbfb82wp7ncz2rwac68jd50qxr70a-libglvnd-1.7.0-dev","/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh","/nix/store/bq6xbl9cq6hkcn65mz2fzc2k38xiv87h-update-autotools-gnu-config-scripts-hook","/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1","/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh","/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh","/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh","/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10","/nix/store/ilaf1w22bxi6jsi45alhmvvdgy4ly3zs-patch-shebangs.sh","/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh","/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0","/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh","/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh","/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0","/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh","/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh","/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh","/nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh","/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45","/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh","/nix/store/xfhkjnpqjwlf6hlk1ysmq3aaq80f3bjj-stdenv-linux","/nix/store/9yw614l0qvmx093i68cqyfy8lpsvzf3i-nix-shell"],"channel":"stable-24_05","channel_nix_path":"/nix/store/r9dxa39mzcwfm6qp398j3wkms3vwiqcd-nixpkgs-stable-24_05-24.05.tar.gz/nixpkgs-stable-24_05","production":null}}}
</file>

<file path=".cache/replit/toolchain.json">
{"runs":[{"id":".replit/run","name":"sh -c 'npm run dev'","fileTypeAttrs":{},"run":{"command":{"args":["sh","-c","npm run dev"]}}},{"id":"module:nodejs-20/runner:nodeJS","name":"Node.js","fileParam":true,"language":"javascript","fileTypeAttrs":{},"displayVersion":"20.18.1","run":{"command":{"args":["sh","-c","/nix/store/rrz8cqhldyl17bbs60g7d8vbaadkxc40-nodejs-20.18.1-wrapped/bin/node $file"]}},"defaultEntrypoints":["index.js","main.js"]}],"debuggers":[{"id":"module:nodejs-20/debugger:nodeDAP","name":"Node DAP","fileParam":true,"language":"javascript","fileTypeAttrs":{}}],"languageServers":[{"id":"module:web/languageServer:typescript-language-server","name":"TypeScript Language Server","language":"javascript","fileTypeAttrs":{"extensions":[".js",".jsx",".ts",".tsx",".mjs",".mts",".cjs",".cts",".es6",".json"]},"config":{"startCommand":{"args":["sh","-c","/nix/store/9cd76kqpml5gkw8jjnjx0flwdf0a1gv1-typescript-language-server-4.3.3/bin/typescript-language-server --stdio"]},"initializationOptionsJson":"{\"tsserver\":{\"fallbackPath\":\"/nix/store/g6ns6m42fvybfzb2xjppcsfmb6k0jv5x-typescript-5.6.3/lib/node_modules/typescript/lib\"}}"},"displayVersion":"4.3.3"},{"id":"module:replit/languageServer:dotreplit-lsp","name":".replit LSP","language":"dotreplit","fileTypeAttrs":{},"config":{"startCommand":{"args":["sh","-c","/nix/store/bz8k1njgmm249fr5krhaq1jsi7jrhx5k-taplo-0.patched/bin/taplo lsp -c /nix/store/2zhz6va20gizdlqmvryab9b7pn6dp0v1-taplo-config.toml stdio"]}}},{"id":"module:web/languageServer:css","name":"CSS Language Server","language":"css","fileTypeAttrs":{"extensions":[".css",".less",".scss"]},"config":{"startCommand":{"args":["sh","-c","/nix/store/ydkb3d7r0zs7wd7jcwnk1v24qmzjqnkh-vscode-langservers-extracted-4.10.0/bin/vscode-css-language-server --stdio"]},"configurationJson":"{\"css\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}},\"less\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}},\"scss\":{\"completion\":{\"completePropertyWithSemicolon\":true,\"triggerPropertyValueCompletion\":true},\"hover\":{\"documentation\":true,\"references\":true},\"lint\":{\"argumentsInColorFunction\":\"error\",\"boxModel\":\"ignore\",\"compatibleVendorPrefixes\":\"ignore\",\"duplicateProperties\":\"warning\",\"emptyRules\":\"warning\",\"float\":\"ignore\",\"fontFaceProperties\":\"warning\",\"hexColorLength\":\"error\",\"idSelector\":\"ignore\",\"ieHack\":\"ignore\",\"importStatement\":\"ignore\",\"important\":\"ignore\",\"propertyIgnoredDueToDisplay\":\"warning\",\"universalSelector\":\"ignore\",\"unknownAtRules\":\"warning\",\"unknownProperties\":\"warning\",\"unknownVendorSpecificProperties\":\"ignore\",\"validProperties\":[],\"vendorPrefix\":\"warning\",\"zeroUnits\":\"ignore\"},\"trace\":{\"server\":\"off\"}}}","initializationOptionsJson":"{\"provideFormatter\":true}"}},{"id":"module:web/languageServer:html","name":"HTML Language Server","language":"html","fileTypeAttrs":{"extensions":[".html"]},"config":{"startCommand":{"args":["sh","-c","/nix/store/ydkb3d7r0zs7wd7jcwnk1v24qmzjqnkh-vscode-langservers-extracted-4.10.0/bin/vscode-html-language-server --stdio"]},"configurationJson":"{\"html\":{\"autoClosingTags\":true,\"autoCreateQuotes\":true,\"completion\":{\"attributeDefaultValue\":\"doublequotes\"},\"customData\":[],\"format\":{\"contentUnformatted\":\"pre,code,textarea\",\"enable\":true,\"endWithNewline\":false,\"extraLiners\":\"head, body, /html\",\"indentHandlebars\":false,\"indentInnerHtml\":false,\"preserveNewLines\":true,\"templating\":false,\"unformatted\":\"wbr\",\"unformattedContentDelimiter\":\"\",\"wrapAttributes\":\"auto\",\"wrapLineLength\":120},\"hover\":{\"documentation\":true,\"references\":true},\"mirrorCursorOnMatchingTag\":false,\"suggest\":{\"html5\":true},\"trace\":{\"server\":\"off\"},\"validate\":{\"scripts\":true,\"styles\":true}}}","initializationOptionsJson":"{\"enable\":true,\"provideFormatter\":true}"}}],"packagers":[{"id":"module:nodejs-20/packager:upmNodejs","name":"Node.js packager (npm, yarn, pnpm, bun)","language":"nodejs","packageSearch":true,"guessImports":true}],"formatters":[{"id":"module:nodejs-20/formatter:prettier","name":"Prettier","startCommand":{"args":["/nix/store/070ycjyhpfv8n895zq7yz6z0pp57g0q9-run-prettier/bin/run-prettier"],"lifecycle":"STDIN","splitStderr":true},"fileTypeAttrs":{"extensions":[".js",".jsx",".ts",".tsx",".json",".html"]},"displayVersion":"3.3.3","supportsRangeFormatting":true},{"id":"module:replit/languageServer:dotreplit-lsp","name":".replit LSP","fileTypeAttrs":{}},{"id":"module:web/languageServer:css","name":"CSS Language Server","fileTypeAttrs":{"extensions":[".css",".less",".scss"]}},{"id":"module:web/languageServer:html","name":"HTML Language Server","fileTypeAttrs":{"extensions":[".html"]}},{"id":"module:web/languageServer:typescript-language-server","name":"TypeScript Language Server","fileTypeAttrs":{"extensions":[".js",".jsx",".ts",".tsx",".mjs",".mts",".cjs",".cts",".es6",".json"]},"displayVersion":"4.3.3"}]}
</file>

<file path=".local/state/replit/agent/.latest.json">
{"latest": "main"}
</file>

<file path=".upm/store.json">
{"version":2,"languages":{"nodejs-npm":{"specfileHash":"09c3021dd4c251a32530e5bb2fe01570","lockfileHash":"4edbe82f2af79389ceb42203af1ce2d9"}}}
</file>

<file path="client/src/components/map/location-map.tsx">
import React, { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import L from 'leaflet';

// Fix for default marker icons in Leaflet with React
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

// Default center coordinates (Singapore)
const DEFAULT_CENTER = [1.3521, 103.8198];
const DEFAULT_ZOOM = 12;

interface LocationPoint {
  id: string;
  position: [number, number];
  name: string;
}

interface LocationMapProps {
  selectedLocations: LocationPoint[];
  onLocationSelect?: (location: LocationPoint) => void;
  onLocationRemove?: (locationId: string) => void;
  editable?: boolean;
  height?: string;
}

// Component that handles map clicks
function MapClickHandler({ onLocationSelect }: { onLocationSelect?: (location: LocationPoint) => void }) {
  const map = useMapEvents({
    click: (e) => {
      if (onLocationSelect) {
        const newLocation: LocationPoint = {
          id: `loc-${Date.now()}`,
          position: [e.latlng.lat, e.latlng.lng],
          name: `Selected Location (${e.latlng.lat.toFixed(4)}, ${e.latlng.lng.toFixed(4)})`
        };
        onLocationSelect(newLocation);
      }
    }
  });
  return null;
}

export function LocationMap({ 
  selectedLocations = [], 
  onLocationSelect,
  onLocationRemove,
  editable = false,
  height = '400px'
}: LocationMapProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);

  // Search for locations using Nominatim OpenStreetMap API
  const searchLocation = async () => {
    if (!searchQuery) return;
    
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}`
      );
      const data = await response.json();
      setSearchResults(data);
    } catch (error) {
      console.error('Error searching for location:', error);
    }
  };

  const selectSearchResult = (result: any) => {
    if (onLocationSelect) {
      const newLocation: LocationPoint = {
        id: `loc-${Date.now()}`,
        position: [parseFloat(result.lat), parseFloat(result.lon)],
        name: result.display_name.split(',')[0]
      };
      onLocationSelect(newLocation);
      setSearchResults([]);
      setSearchQuery('');
    }
  };

  return (
    <Card className="w-full shadow-md">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg">Location Map</CardTitle>
        {editable && (
          <div className="flex mt-2 gap-2">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search for a location..."
              className="flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              onKeyDown={(e) => e.key === 'Enter' && searchLocation()}
            />
            <Button type="button" onClick={searchLocation} size="sm">Search</Button>
          </div>
        )}
        {searchResults.length > 0 && (
          <div className="mt-2 max-h-40 overflow-y-auto border rounded-md">
            {searchResults.map((result) => (
              <div 
                key={result.place_id} 
                className="p-2 hover:bg-gray-100 cursor-pointer"
                onClick={() => selectSearchResult(result)}
              >
                {result.display_name}
              </div>
            ))}
          </div>
        )}
      </CardHeader>
      <CardContent className="pt-2">
        <div style={{ height }}>
          <MapContainer 
            center={DEFAULT_CENTER as L.LatLngExpression} 
            zoom={DEFAULT_ZOOM} 
            style={{ height: '100%', width: '100%', borderRadius: '0.375rem' }}
          >
            <TileLayer
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            
            {editable && <MapClickHandler onLocationSelect={onLocationSelect} />}
            
            {selectedLocations.map((location) => (
              <Marker key={location.id} position={location.position}>
                <Popup>
                  <div>
                    <p>{location.name}</p>
                    {editable && onLocationRemove && (
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        onClick={() => onLocationRemove(location.id)}
                        className="mt-2"
                      >
                        Remove
                      </Button>
                    )}
                  </div>
                </Popup>
              </Marker>
            ))}
          </MapContainer>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="client/src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="client/src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="client/src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="client/src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="client/src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="client/src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="client/src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="client/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="client/src/components/ui/calendar.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="client/src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="client/src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="client/src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="client/src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="client/src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="client/src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="client/src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="client/src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="client/src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="client/src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="client/src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="client/src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="client/src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="client/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="client/src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="client/src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="client/src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="client/src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="client/src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="client/src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="client/src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="client/src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="client/src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="client/src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="client/src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="client/src/components/ui/sheet.tsx">
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="client/src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value
          )
        }

        _setOpen(value)

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="client/src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="client/src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="client/src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="client/src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="client/src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="client/src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="client/src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="client/src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="client/src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="client/src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="client/src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="client/src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="client/src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="client/src/lib/protected-route.tsx">
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route } from "wouter";

export function ProtectedRoute({
  path,
  component: Component,
}: {
  path: string;
  component: () => React.JSX.Element;
}) {
  const { user, isLoading } = useAuth();

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </Route>
    );
  }

  if (!user) {
    return (
      <Route path={path}>
        <Redirect to="/auth" />
      </Route>
    );
  }

  return <Component />
}
</file>

<file path="client/src/pages/bus-guide-page.tsx">
import { NavBar } from "@/components/nav-bar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Bus, ExternalLink, AlertTriangle, Clock } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

export default function BusGuidePage() {
  return (
    <div className="min-h-screen bg-slate-50">
      <NavBar />
      <main className="container mx-auto py-6 px-4 max-w-5xl">
        <h1 className="text-3xl font-bold mb-6">Complete Bus Travel Guide</h1>
        
        <div className="mb-6">
          <Alert className="bg-amber-50 border-amber-200">
            <AlertTriangle className="h-4 w-4 text-amber-600" />
            <AlertTitle className="text-amber-800">Important Notice</AlertTitle>
            <AlertDescription className="text-amber-700">
              Buses from CIQ 2nd Link depart <strong>only once per hour</strong>. If you miss your bus, you may need to wait up to an hour for the next one.
            </AlertDescription>
          </Alert>
        </div>
        
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3">Official Resources</h2>
          <div className="space-y-2">
            <a 
              href="https://www.causewaylink.com.my/important-announcement-for-cw3-cw4-passengers-relocating-to-jurong-town-hall-bus-interchange/" 
              target="_blank" 
              rel="noopener noreferrer"
              className="flex items-center text-blue-600 hover:underline"
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              CW3 & CW4 Routes: Jurong Town Hall Bus Interchange Information
            </a>
            <a 
              href="https://www.causewaylink.com.my/forest-city-fc1/" 
              target="_blank" 
              rel="noopener noreferrer"
              className="flex items-center text-blue-600 hover:underline"
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              Forest City FC1 Bus Information
            </a>
          </div>
        </div>
        
        <div className="mb-6 border rounded-lg overflow-hidden">
          <h2 className="text-xl font-semibold p-3 bg-slate-50">FC1 Bus Route Map</h2>
          <div className="relative">
            <img 
              src="https://www.causewaylink.com.my/wp-content/uploads/2023/12/FC1-Map-free-parking-1024x787.jpg" 
              alt="FC1 Bus Route Map with Free Parking Locations" 
              className="w-full h-auto"
            />
            <div className="absolute bottom-2 right-2 bg-white bg-opacity-80 px-2 py-1 text-xs rounded">
              Source: <a href="https://www.causewaylink.com.my/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">Causeway Link</a>
            </div>
          </div>
        </div>
        
        <Tabs defaultValue="singapore" className="space-y-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="singapore">Singapore to Forest City</TabsTrigger>
            <TabsTrigger value="forest-city">Forest City to Singapore</TabsTrigger>
          </TabsList>

          {/* Singapore to Forest City */}
          <TabsContent value="singapore">
            <Card>
              <CardHeader>
                <CardTitle>Singapore to Forest City Bus Guide</CardTitle>
                <CardDescription>
                  Detailed information on taking public buses from Singapore
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <h3 className="text-xl font-medium mb-4">Quick Reference</h3>
                  <ul className="list-disc list-inside space-y-2">
                    <li><strong>Journey:</strong> Jurong Town Hall Bus Interchange → CIQ 2nd Link → Forest City</li>
                    <li><strong>Buses:</strong> Take CW3/CW4/CW4S/CW6/CW7, then FC1 after immigration</li>
                    <li><strong>Total fare:</strong> S$5 (through-ticketing available)</li>
                    <li><strong>Payment:</strong> Cash or ManjaLink card</li>
                    <li><strong>Travel time:</strong> ~1.5-2 hours including immigration</li>
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">Boarding Options</h3>
                  <ul className="list-disc list-inside space-y-4">
                    <li>
                      <div className="mb-2">
                        <strong>From Jurong East:</strong> Take CW3, CW4, or CW4S from Jurong Town Hall Bus Interchange
                      </div>
                      <a href="https://maps.app.goo.gl/nEHmgo2aobpzA1vZA" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline inline-flex items-center">
                        <ExternalLink className="h-4 w-4 mr-1" />
                        View on Maps
                      </a>
                    </li>
                    <li>
                      <div className="mb-2">
                        <strong>From Boon Lay MRT:</strong> Take CW6
                      </div>
                      <a href="https://maps.app.goo.gl/JXuyU3oe5eK2LGCT8" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline inline-flex items-center">
                        <ExternalLink className="h-4 w-4 mr-1" />
                        View on Maps
                      </a>
                    </li>
                    <li>
                      <div className="mb-2">
                        <strong>From Kranji MRT:</strong> Take CW7
                      </div>
                      <a href="https://maps.app.goo.gl/8VQP7iGQZaBJTubo7" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline inline-flex items-center">
                        <ExternalLink className="h-4 w-4 mr-1" />
                        View on Maps
                      </a>
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">Immigration Process</h3>
                  <ol className="list-decimal list-inside space-y-3">
                    <li>
                      <strong>Singapore Exit:</strong> Alight at checkpoint, go through Singapore immigration, then board the same bus.
                    </li>
                    <li>
                      <strong>Malaysian Entry:</strong> Alight at 2nd Link CIQ, clear Malaysian immigration.
                    </li>
                    <li>
                      <strong>To Forest City:</strong> After clearing immigration, take the FC1 bus to Forest City.
                    </li>
                  </ol>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">FC1 Bus Schedule from CIQ 2nd Link</h3>
                  <div className="bg-slate-50 p-4 rounded-md mb-4">
                    <div className="font-medium text-red-600 flex items-center mb-3">
                      <Clock className="h-4 w-4 mr-2" />
                      Note: Buses depart ONLY once per hour. Plan accordingly!
                    </div>
                    <p className="mb-4">Buses run from 6:00 AM to 8:30 PM with hourly departures. Check the official schedule for the most up-to-date information.</p>
                    <div className="space-y-2">
                      <a 
                        href="https://www.causewaylink.com.my/forest-city-fc1/" 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center text-blue-600 hover:underline"
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        View Official FC1 Bus Schedule
                      </a>
                      <a 
                        href="https://www.causewaylink.com.my/cashless-travel/?utm_source=cwl_homepage_shortcut&utm_medium=cwl_homepage_shortcut&utm_campaign=cwl_homepage_shortcut" 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center text-blue-600 hover:underline"
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        Learn About Cashless Payment Options
                      </a>
                    </div>
                  </div>
                  <div>
                    <h4 className="font-medium mb-2">Drop-off Location in Forest City</h4>
                    <p className="mb-2">The FC1 bus will alight passengers at:</p>
                    <a 
                      href="https://maps.app.goo.gl/kLJeAV6Mq6NiaooZ7" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="flex items-center text-blue-600 hover:underline"
                    >
                      <ExternalLink className="h-4 w-4 mr-2" />
                      View Drop-off Location on Google Maps
                    </a>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Forest City to Singapore */}
          <TabsContent value="forest-city">
            <Card>
              <CardHeader>
                <CardTitle>Forest City to Singapore Bus Guide</CardTitle>
                <CardDescription>
                  Detailed information on taking public buses from Forest City
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <h3 className="text-xl font-medium mb-4">Quick Reference</h3>
                  <ul className="list-disc list-inside space-y-2">
                    <li><strong>Journey:</strong> Forest City → CIQ 2nd Link → Singapore</li>
                    <li><strong>Buses:</strong> Take FC1 to CIQ, then CW3/CW4/CW4S/CW6/CW7 after immigration</li>
                    <li><strong>Total fare:</strong> MYR 5 (through-ticketing available)</li>
                    <li><strong>Payment:</strong> Cash or ManjaLink card</li>
                    <li><strong>Travel time:</strong> ~1.5-2 hours including immigration</li>
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">Boarding Points</h3>
                  <ul className="list-disc list-inside space-y-4">
                    <li>
                      <div className="mb-2">
                        <strong>From Forest City Mall:</strong> Take FC1 from the bus station in front
                      </div>
                      <a href="https://maps.app.goo.gl/2dafz1uCyMhBGHK3A" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline inline-flex items-center">
                        <ExternalLink className="h-4 w-4 mr-1" />
                        View on Maps
                      </a>
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">Immigration Process</h3>
                  <ol className="list-decimal list-inside space-y-3">
                    <li>
                      <strong>Malaysian Exit:</strong> Alight at 2nd Link CIQ, go through Malaysian immigration.
                    </li>
                    <li>
                      <strong>To Singapore:</strong> After clearing immigration, take the corresponding bus (CW3/CW4/CW4S/CW6/CW7) to your destination in Singapore.
                    </li>
                    <li>
                      <strong>Singapore Entry:</strong> The bus will stop at Singapore checkpoint. Clear immigration and re-board the same bus.
                    </li>
                  </ol>
                </div>
                
                <div>
                  <h3 className="text-xl font-medium mb-4">FC1 Bus Schedule from Forest City</h3>
                  <div className="bg-slate-50 p-4 rounded-md mb-4">
                    <div className="font-medium text-red-600 flex items-center mb-3">
                      <Clock className="h-4 w-4 mr-2" />
                      Note: Buses depart ONLY once per hour. Plan accordingly!
                    </div>
                    <p className="mb-4">Buses run from 5:30 AM to 7:30 PM with hourly departures. Check the official schedule for the most up-to-date information.</p>
                    <div className="space-y-2">
                      <a 
                        href="https://www.causewaylink.com.my/forest-city-fc1/" 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center text-blue-600 hover:underline"
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        View Official FC1 Bus Schedule
                      </a>
                      <a 
                        href="https://www.causewaylink.com.my/cashless-travel/?utm_source=cwl_homepage_shortcut&utm_medium=cwl_homepage_shortcut&utm_campaign=cwl_homepage_shortcut" 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center text-blue-600 hover:underline"
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        Learn About Cashless Payment Options
                      </a>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
</file>

<file path="client/src/pages/not-found.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="client/src/pages/profile.tsx">
import React, { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { NavBar } from "@/components/nav-bar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useAuth } from "@/hooks/use-auth";
import { InsertUser } from "@shared/schema";
import { useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Loader2, UserCog } from "lucide-react";

export default function ProfilePage() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  
  // Profile form state
  const [profileData, setProfileData] = useState<Partial<InsertUser>>({
    name: "",
    whatsappNumber: "",
    malaysianNumber: "",
    revolutUsername: "",
  });

  // Error message state
  const [error, setError] = useState("");

  // Load user data when component mounts
  useEffect(() => {
    if (!user) {
      setLocation("/auth");
      return;
    }

    // Populate form with user data
    setProfileData({
      name: user.name || "",
      whatsappNumber: user.whatsappNumber || "",
      malaysianNumber: user.malaysianNumber || "",
      revolutUsername: user.revolutUsername || "",
    });
    
    setLoading(false);
  }, [user, setLocation]);

  // Mutation for updating user profile
  const updateProfileMutation = useMutation({
    mutationFn: async (data: Partial<InsertUser>) => {
      if (!user?.id) throw new Error("User not logged in");
      
      try {
        const res = await apiRequest("PATCH", `/api/users/${user.id}`, data);
        return await res.json();
      } catch (err) {
        console.error("Profile update error:", err);
        // If we get a HTML error response instead of JSON, provide a clearer error
        if (err instanceof Error && err.message.includes("<!DOCTYPE")) {
          throw new Error("Server error: The server returned an HTML error instead of JSON");
        }
        throw err;
      }
    },
    onSuccess: () => {
      // Invalidate auth user instead of just users
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
      queryClient.invalidateQueries({ queryKey: ["/api/auth/me"] });
      
      toast({
        title: "Success",
        description: "Your profile has been updated",
      });
    },
    onError: (error: Error) => {
      console.error("Profile update error:", error);
      setError(error.message);
      
      toast({
        title: "Error",
        description: "Failed to update profile: " + error.message,
        variant: "destructive",
      });
    },
  });

  const handleInputChange = (field: string, value: string) => {
    setProfileData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    updateProfileMutation.mutate(profileData);
  };

  if (loading) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="flex items-center justify-center min-h-[80vh]">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <NavBar />
      <main className="max-w-3xl mx-auto px-4 py-8 pt-20">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <UserCog className="h-5 w-5" />
              Profile Settings
            </CardTitle>
            <CardDescription>
              Update your contact information and preferences
            </CardDescription>
          </CardHeader>
          <CardContent>
            {error && (
              <div className="bg-red-100 text-red-600 p-2 rounded mb-4 text-sm">
                {error}
              </div>
            )}
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="discord-username">Discord Username</Label>
                <Input
                  id="discord-username"
                  type="text"
                  value={user?.discordUsername || ""}
                  disabled
                />
                <p className="text-xs text-muted-foreground">
                  Your Discord username cannot be changed
                </p>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <Input
                  id="name"
                  type="text"
                  value={profileData.name || ""}
                  onChange={(e) => handleInputChange("name", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="whatsappNumber">WhatsApp Number</Label>
                <Input
                  id="whatsappNumber"
                  type="tel"
                  placeholder="+65xxxxxxxx"
                  value={profileData.whatsappNumber || ""}
                  onChange={(e) => handleInputChange("whatsappNumber", e.target.value)}
                />
                <p className="text-xs text-muted-foreground">
                  Recommended for ride coordination
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="malaysianNumber">Malaysian Phone Number</Label>
                <Input
                  id="malaysianNumber"
                  type="tel"
                  placeholder="+60xxxxxxxx"
                  value={profileData.malaysianNumber || ""}
                  onChange={(e) => handleInputChange("malaysianNumber", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="revolutUsername">Revolut Username</Label>
                <Input
                  id="revolutUsername"
                  type="text"
                  value={profileData.revolutUsername || ""}
                  onChange={(e) => handleInputChange("revolutUsername", e.target.value)}
                />
                <p className="text-xs text-muted-foreground">
                  For payment coordination
                </p>
              </div>

              <Button 
                type="submit" 
                className="w-full mt-6"
                disabled={updateProfileMutation.isPending}
              >
                {updateProfileMutation.isPending ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Updating...
                  </>
                ) : "Save Changes"}
              </Button>
            </form>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
</file>

<file path="client/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}
</file>

<file path="client/src/main.tsx">
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="client/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="server/vite.ts">
import express, { type Express } from "express";
import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { createServer as createViteServer, createLogger } from "vite";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(__dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}
</file>

<file path=".replit">
modules = ["nodejs-20", "web", "postgresql-16"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "cloudrun"
build = ["npm", "run", "build"]
run = ["npm", "run", "start"]

[[ports]]
localPort = 5000
externalPort = 80

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000
</file>

<file path="drizzle.config.ts">
import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="replit.nix">
{pkgs}: {
  deps = [
    pkgs.postgresql
  ];
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;
</file>

<file path="theme.json">
{
  "variant": "professional",
  "primary": "hsl(222.2 47.4% 11.2%)",
  "appearance": "light",
  "radius": 0.5
}
</file>

<file path="tsconfig.json">
{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}
</file>

<file path="client/src/components/sequence-manager.tsx">
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQuery } from "@tanstack/react-query";
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { Lock, Unlock, AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { RidePassenger } from "@shared/schema";

interface PassengerWithSequence extends RidePassenger {
  user?: {
    fullName: string;
  };
}

interface SequenceManagerProps {
  rideId: number;
}

export function SequenceManager({ rideId }: SequenceManagerProps) {
  const [passengers, setPassengers] = useState<PassengerWithSequence[]>([]);
  const [sequenceLocked, setSequenceLocked] = useState(false);
  const { toast } = useToast();

  // Fetch passengers
  const { data: passengersData, isLoading } = useQuery<PassengerWithSequence[]>({
    queryKey: [`/api/rides/${rideId}/passengers`],
    enabled: !!rideId,
  });

  useEffect(() => {
    if (passengersData) {
      const sortedPassengers = [...passengersData].sort((a, b) => {
        // If both have sequence numbers, sort by sequence
        if (a.dropoffSequence !== null && b.dropoffSequence !== null) {
          return a.dropoffSequence - b.dropoffSequence;
        }
        // If only a has sequence, a comes first
        if (a.dropoffSequence !== null) return -1;
        // If only b has sequence, b comes first
        if (b.dropoffSequence !== null) return 1;
        // If neither has sequence, keep original order
        return 0;
      });

      setPassengers(sortedPassengers);

      // Check if sequence is locked (all passengers have sequence numbers)
      const isLocked = sortedPassengers.length > 0 && 
        sortedPassengers.every(p => p.dropoffSequence !== null);
      setSequenceLocked(isLocked);
    }
  }, [passengersData]);

  // Update sequence mutation
  const updateSequenceMutation = useMutation({
    mutationFn: async ({ passengerId, sequence }: { passengerId: number, sequence: number }) => {
      const res = await apiRequest(
        "PATCH",
        `/api/rides/${rideId}/passengers/${passengerId}/sequence`,
        { sequence }
      );
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/rides/${rideId}/passengers`] });
      toast({
        title: "Success",
        description: "Passenger sequence updated",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Lock sequence mutation
  const lockSequenceMutation = useMutation({
    mutationFn: async () => {
      const res = await apiRequest(
        "POST",
        `/api/rides/${rideId}/lockSequence`,
        {}
      );
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/rides/${rideId}/passengers`] });
      setSequenceLocked(true);
      toast({
        title: "Success",
        description: "Sequence locked successfully",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Handle drag and drop
  const onDragEnd = (result: any) => {
    if (!result.destination || sequenceLocked) return;

    const items = Array.from(passengers);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    // Update sequence numbers
    const updatedItems = items.map((item, index) => ({
      ...item,
      dropoffSequence: index + 1,
    }));

    setPassengers(updatedItems);

    // Update sequence in database
    updateSequenceMutation.mutate({
      passengerId: reorderedItem.id,
      sequence: result.destination.index + 1,
    });
  };

  if (isLoading) {
    return <div className="text-center py-4">Loading passengers...</div>;
  }

  if (!passengers.length) {
    return <div className="text-center py-4">No passengers have joined this ride yet.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Drop-off Sequence</span>
          {sequenceLocked ? (
            <Lock className="h-5 w-5 text-red-500" />
          ) : (
            <Unlock className="h-5 w-5 text-green-500" />
          )}
        </CardTitle>
        <CardDescription>
          {sequenceLocked
            ? "The drop-off sequence has been locked."
            : "Drag to reorder the drop-off sequence for passengers."}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!sequenceLocked && (
          <Alert className="mb-4 bg-blue-50 border-blue-200">
            <AlertCircle className="h-4 w-4 text-blue-600" />
            <AlertDescription className="text-blue-800">
              Drag and drop passengers to set the sequence in which they will be dropped off. Lock the sequence when finalized.
            </AlertDescription>
          </Alert>
        )}

        <DragDropContext onDragEnd={onDragEnd}>
          <Droppable droppableId="droppable">
            {(provided) => (
              <div
                {...provided.droppableProps}
                ref={provided.innerRef}
                className="space-y-2"
              >
                {passengers.map((passenger, index) => (
                  <Draggable
                    key={passenger.id.toString()}
                    draggableId={passenger.id.toString()}
                    index={index}
                    isDragDisabled={sequenceLocked}
                  >
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        className={`p-3 rounded-md border ${
                          sequenceLocked ? 'bg-gray-50' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <div className="flex-shrink-0 w-6 h-6 rounded-full bg-blue-100 text-blue-800 flex items-center justify-center font-semibold">
                            {passenger.dropoffSequence || index + 1}
                          </div>
                          <div className="flex-1">
                            <div className="font-medium">{passenger.user?.fullName || 'Passenger'}</div>
                            <div className="text-sm text-gray-500">{passenger.dropoffLocation}</div>
                          </div>
                        </div>
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>

        {!sequenceLocked && (
          <Button
            onClick={() => lockSequenceMutation.mutate()}
            className="w-full mt-4"
            variant="destructive"
            disabled={lockSequenceMutation.isPending}
          >
            {lockSequenceMutation.isPending ? "Locking..." : "Lock Sequence"}
          </Button>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="client/src/lib/queryClient.ts">
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const url = queryKey[0] as string;
    console.log("Making API request to:", url);
    const res = await fetch(url, {
      credentials: "include",
    });
    console.log("API response status:", res.status);

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});
</file>

<file path="client/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Simple function to format a date for datetime-local input
 * Keeps the date as-is without timezone conversions
 * @param date The date to format
 * @returns A string in the format YYYY-MM-DDTHH:MM
 */
export function formatForDateTimeInput(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  
  return `${year}-${month}-${day}T${hours}:${minutes}`;
}

/**
 * Format a date in a user-friendly way
 * @param date The date to format
 * @returns Formatted date string
 */
export function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-SG', {
    weekday: 'short',
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    hour12: true
  }).format(date);
}

/**
 * Check if a date is in the past
 * @param date The date to check
 * @returns true if the date is in the past
 */
export function isPastDate(date: Date): boolean {
  return date < new Date();
}
</file>

<file path="client/src/pages/vendor-dashboard.tsx">
import { useQuery, useMutation } from "@tanstack/react-query";
import { NavBar } from "@/components/nav-bar";
import { RideCard } from "@/components/ride-card";
import { useLocation } from "wouter";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

export default function VendorDashboard() {
  const [location] = useLocation();
  const { toast } = useToast();
  const rideToAssign = new URLSearchParams(location.split("?")[1]).get("rideId");

  const { data: vendorRides, isLoading: isLoadingVendorRides } = useQuery({
    queryKey: ["/api/vendor/rides"],
  });

  const { data: availableRides, isLoading: isLoadingAvailableRides } = useQuery({
    queryKey: ["/api/rides"],
  });

  const assignRideMutation = useMutation({
    mutationFn: async (rideId: number) => {
      const res = await apiRequest("POST", `/api/rides/${rideId}/assign`);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/rides"] });
      queryClient.invalidateQueries({ queryKey: ["/api/vendor/rides"] });
      toast({
        title: "Success",
        description: "Ride assigned successfully",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  if (isLoadingVendorRides || isLoadingAvailableRides) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="flex items-center justify-center min-h-[80vh] pt-20">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <NavBar />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pt-20">
        <Tabs defaultValue="assigned">
          <TabsList className="grid w-full max-w-md mx-auto grid-cols-2">
            <TabsTrigger value="assigned">My Rides</TabsTrigger>
            <TabsTrigger value="available">Available Rides</TabsTrigger>
          </TabsList>

          <TabsContent value="assigned" className="mt-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {vendorRides?.map((ride) => (
                <RideCard key={ride.id} ride={ride} showActions={false} />
              ))}
              {vendorRides?.length === 0 && (
                <p className="text-muted-foreground col-span-full text-center py-8">
                  No assigned rides yet.
                </p>
              )}
            </div>
          </TabsContent>

          <TabsContent value="available" className="mt-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {availableRides
                ?.filter((ride) => ride.status === "open")
                .map((ride) => (
                  <RideCard
                    key={ride.id}
                    ride={ride}
                    onAssign={() => assignRideMutation.mutate(ride.id)}
                  />
                ))}
              {availableRides?.filter((ride) => ride.status === "open")
                .length === 0 && (
                <p className="text-muted-foreground col-span-full text-center py-8">
                  No available rides at the moment.
                </p>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
</file>

<file path="server/db.ts">
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

// Create pool with connection timeout and retry logic
export const pool = new Pool({ 
  connectionString: process.env.DATABASE_URL,
  connectionTimeoutMillis: 10000, // 10 seconds
  max: 20 // Maximum number of clients the pool should contain
});

// Add error handler for connection issues
pool.on('error', (err) => {
  console.error('Unexpected error on idle database client', err);
  if (process.env.NODE_ENV !== 'production') {
    process.exit(-1);
  }
});

export const db = drizzle({ client: pool, schema });
</file>

<file path=".gitignore">
node_modules
dist
.DS_Store
server/public
vite.config.ts.*
*.tar.gz
attached_assets
</file>

<file path="README.md">
# RideShare - Community Ride Sharing Platform

A full-stack application that connects people looking for rides with drivers offering transportation services. This platform streamlines the process of organizing shared transportation, making it easier to coordinate carpools and reduce transportation costs.

## 🚀 Features

- **User Authentication**: Secure login and registration system
- **Ride Creation**: Create and manage rides with detailed information
- **Ride Joining**: Easily find and join available rides
- **Route Planning**: Set pickup and multiple dropoff locations
- **Driver Management**: Vendors can manage driver profiles and availability
- **Real-time Status Updates**: Track ride status and receive updates
- **Interactive Maps**: Visualize routes and locations
- **Responsive Design**: Works on desktop and mobile devices

## 📋 Tech Stack

### Frontend
- React with TypeScript
- TailwindCSS for styling
- Shadcn UI components
- React Query for state management
- Wouter for routing
- React Hook Form for form handling
- Leaflet for map integration

### Backend
- Node.js with Express
- TypeScript
- Passport.js for authentication
- Drizzle ORM with NeonDB (PostgreSQL)
- WebSockets for real-time updates

## 📦 Project Structure

```
├── client/              # Frontend React application
│   ├── src/
│   │   ├── components/  # Reusable UI components
│   │   ├── hooks/       # Custom React hooks
│   │   ├── lib/         # Utility functions
│   │   ├── pages/       # Application pages
│   │   └── ...
│
├── server/              # Backend Express application
│   ├── auth.ts          # Authentication logic
│   ├── db.ts            # Database configuration
│   ├── routes.ts        # API routes
│   ├── storage.ts       # Data storage and retrieval
│   └── ...
│
├── shared/              # Shared code between client and server
│   ├── schema/          # Database and validation schemas
│   └── ...
│
└── ...
```

## 🚀 Getting Started

### Prerequisites

- Node.js (v18 or higher)
- npm or yarn
- PostgreSQL database (or Neon.tech account)

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/rideshare.git
   cd rideshare
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Set up environment variables:
   Create a `.env` file in the root directory with the following variables:
   ```
   DATABASE_URL=your_database_connection_string
   SESSION_SECRET=your_session_secret
   ```

4. Set up the database:
   ```bash
   npm run db:push
   ```

5. Start the development server:
   ```bash
   npm run dev
   ```

The application will be available at `http://localhost:3000`.

## 🔄 Development Workflow

- `npm run dev` - Start the development server
- `npm run build` - Build the production application
- `npm run start` - Start the production server
- `npm run check` - Run TypeScript type checking
- `npm run db:push` - Push database schema changes

## 📱 Deployment

The application is ready to be deployed to platforms like:
- Vercel
- Netlify
- Render
- Heroku
- Railway

## 🛣️ Roadmap
- [ ] User Settings Update
- [ ] Route optimization
- [ ] One-tap WhatsApp messaging
- [ ] Peer-to-peer payments
- [ ] Driver Vendor integration
- [ ] FAQ

## 💬 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the project
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  server: {
    hmr: {
      overlay: false
    }
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true,
  },
});
</file>

<file path="client/src/hooks/use-auth.tsx">
import { createContext, ReactNode, useContext } from "react";
import {
  useQuery,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { insertUserSchema, User as SelectUser, InsertUser } from "@shared/schema";
import { getQueryFn, apiRequest, queryClient } from "../lib/queryClient";
import { useToast } from "@/hooks/use-toast";

type AuthContextType = {
  user: SelectUser | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;
};

type LoginData = Pick<InsertUser, "discordUsername" | "password">;

export const AuthContext = createContext<AuthContextType | null>(null);
export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  const {
    data: user,
    error,
    isLoading,
  } = useQuery<SelectUser | undefined, Error>({
    queryKey: ["/api/auth/me"],
    queryFn: getQueryFn({ on401: "returnNull" }),
  });

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      const res = await apiRequest("POST", "/api/login", credentials);
      return await res.json();
    },
    onSuccess: (user: SelectUser) => {
      queryClient.setQueryData(["/api/auth/me"], user);
    },
    onError: (error: Error) => {
      toast({
        title: "Login failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (credentials: InsertUser) => {
      const res = await apiRequest("POST", "/api/register", credentials);
      return await res.json();
    },
    onSuccess: (user: SelectUser) => {
      queryClient.setQueryData(["/api/auth/me"], user);
    },
    onError: (error: Error) => {
      toast({
        title: "Registration failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("POST", "/api/logout");
    },
    onSuccess: () => {
      queryClient.setQueryData(["/api/auth/me"], null);
    },
    onError: (error: Error) => {
      toast({
        title: "Logout failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return (
    <AuthContext.Provider
      value={{
        user: user ?? null,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
</file>

<file path="client/src/pages/join-ride.tsx">
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertRidePassengerSchema } from "@shared/schema";
import { NavBar } from "@/components/nav-bar";
import { useLocation, useRoute } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { RideCard } from "@/components/ride-card";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";
import { LocationMap } from "@/components/map/location-map";
import { useState, useEffect } from "react";

interface LocationPoint {
  id: string;
  position: [number, number];
  name: string;
}

export default function JoinRide() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  // Get the ride ID from the route parameters instead of query params
  const [, params] = useRoute("/rides/:id/join");
  const rideId = params?.id;
  console.log("Ride ID from route params:", rideId);
  const [selectedLocation, setSelectedLocation] = useState<LocationPoint | null>(null);
  const [showPassportReminder, setShowPassportReminder] = useState(true);

  const { data: ride, isLoading } = useQuery({
    queryKey: [`/api/rides/${rideId}`],
    enabled: !!rideId,
  });

  const form = useForm({
    resolver: zodResolver(insertRidePassengerSchema),
    defaultValues: {
      rideId: parseInt(rideId || "0"),
      dropoffLocation: "",
    },
  });
  
  // Handle location selection
  const handleLocationSelect = (location: LocationPoint) => {
    setSelectedLocation(location);
    form.setValue('dropoffLocation', location.name);
  };

  const joinRideMutation = useMutation({
    mutationFn: async (data: any) => {
      // Log the data being sent to the server
      console.log("Joining ride with data:", data);
      const res = await apiRequest(
        "POST",
        `/api/rides/${data.rideId}/join`,
        data
      );
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/rides"] });
      toast({
        title: "Success",
        description: "Successfully joined the ride",
        variant: "success",
      });
      setLocation("/home");
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  if (isLoading) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="flex items-center justify-center min-h-[80vh]">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </div>
    );
  }

  if (!ride) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="max-w-3xl mx-auto px-4 py-8 pt-20">
          <Card className="text-center">
            <CardHeader>
              <CardTitle>Ride Not Found</CardTitle>
              <CardDescription>
                The ride you're looking for could not be found.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="mb-6 text-muted-foreground">
                The ride may have been cancelled or doesn't exist. Please check the ride ID and try again.
              </p>
              <div className="flex justify-center gap-4">
                <Button variant="outline" onClick={() => setLocation("/home")}>
                  View Available Rides
                </Button>
                <Button onClick={() => setLocation("/rides/create")}>
                  Create a New Ride
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <NavBar />
      <main className="max-w-3xl mx-auto px-4 py-8 pt-20">
        <div className="space-y-8">
          <RideCard ride={ride} showActions={false} />

          <Card>
            <CardHeader>
              <CardTitle>Join This Ride</CardTitle>
              <CardDescription>
                Select your drop-off location to join this ride
              </CardDescription>
            </CardHeader>
            <CardContent>
              {showPassportReminder && ride.direction === "SG->FC" && (
                <Alert variant="warning" className="bg-amber-50 border-amber-200 mb-6">
                  <AlertCircle className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-800">
                    Don't forget to bring your passport! Many travelers have forgotten them in the past.
                    <button 
                      className="ml-2 text-amber-600 underline" 
                      onClick={() => setShowPassportReminder(false)}
                    >
                      Dismiss
                    </button>
                  </AlertDescription>
                </Alert>
              )}
              
              <Form {...form}>
                <form
                  onSubmit={form.handleSubmit((data) =>
                    joinRideMutation.mutate(data)
                  )}
                  className="space-y-6"
                >
                  <FormField
                    control={form.control}
                    name="dropoffLocation"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Drop-off Location</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            placeholder="Select a location on the map or enter here" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className="mt-4">
                    <h3 className="text-sm font-medium mb-2">Select Location on Map</h3>
                    <LocationMap 
                      selectedLocations={selectedLocation ? [selectedLocation] : []} 
                      onLocationSelect={handleLocationSelect}
                      editable
                    />
                  </div>
                  
                  {ride.direction === "FC->SG" && (
                    <div className="mt-4 border-t pt-4">
                      <h3 className="text-sm font-medium mb-2">Drop-off Sequence</h3>
                      <p className="text-sm text-muted-foreground mb-2">
                        The ride organizer will set the drop-off sequence for all passengers traveling from Forest City to Singapore.
                      </p>
                    </div>
                  )}

                  <div className="mt-4 border-t pt-4">
                    <h3 className="text-sm font-medium mb-2">Cost Information</h3>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Base Cost:</span>
                        <span>${ride.cost} SGD</span>
                      </div>
                      {ride.additionalStops > 0 && (
                        <div className="flex justify-between">
                          <span>Additional Stops ({ride.additionalStops}):</span>
                          <span>${ride.additionalStops * 5} SGD</span>
                        </div>
                      )}
                      <div className="flex justify-between font-medium pt-2 border-t mt-2">
                        <span>Total Cost:</span>
                        <span>${ride.cost + (ride.additionalStops * 5)} SGD</span>
                      </div>
                      <div className="flex justify-between text-green-600 pt-2">
                        <span>Your Cost (estimated):</span>
                        <span>${((ride.cost + (ride.additionalStops * 5)) / ride.maxPassengers).toFixed(2)} SGD</span>
                      </div>
                    </div>
                  </div>

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={joinRideMutation.isPending}
                  >
                    {joinRideMutation.isPending ? "Joining..." : "Join Ride"}
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="server/index.ts">
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  // Import storage to check the database
  const { storage } = await import('./storage');
  
  try {
    // Only perform database checks in development environment
    if (process.env.NODE_ENV !== 'production') {
      const allRides = await storage.getRides();
      console.log("Available rides in database:", JSON.stringify(allRides, null, 2));
      
      // If there are no rides, create a sample ride for testing
      if (allRides.length === 0) {
        console.log("No rides found in database. Creating a sample ride for testing...");
        const sampleRide = await storage.createRide({
          creatorId: 1, // Assuming user ID 1 exists
          direction: "SG->FC",
          date: new Date(Date.now() + 86400000), // Tomorrow
          maxPassengers: 4,
          pickupLocation: "Jurong East MRT",
          dropoffLocations: ["Forest City Mall"],
          cost: 80,
          additionalStops: 0
        });
        console.log("Created sample ride:", JSON.stringify(sampleRide, null, 2));
      }
    } else {
      log("Starting server in production mode");
    }
  } catch (error) {
    console.error("Error initializing application:", error instanceof Error ? error.message : String(error));
    // In production, continue despite database check errors
    if (process.env.NODE_ENV !== 'production') {
      throw error;
    }
  }
  
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    
    // Log the error in a structured way
    console.error(`Error [${status}]: ${message}`, err.stack || '');
    
    // Send response to client
    res.status(status).json({ message });
    
    // Don't throw the error in production as it can crash the server
    if (process.env.NODE_ENV !== 'production') {
      throw err;
    }
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();
</file>

<file path="package.json">
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hello-pangea/dnd": "^18.0.1",
    "@hookform/resolvers": "^3.9.1",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.3.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.2.4",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.1",
    "react-icons": "^5.4.0",
    "react-leaflet": "^4.2.1",
    "react-resizable-panels": "^2.1.4",
    "recharts": "^2.13.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.0",
    "wouter": "^3.3.5",
    "ws": "^8.18.1",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.0.7",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.5",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}
</file>

<file path="client/src/pages/guide-page.tsx">
import { NavBar } from "@/components/nav-bar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Bus, MapPin, AlertTriangle, Phone, ExternalLink, IdCard, Clock } from "lucide-react";
import { LocationMap } from "@/components/map/location-map";

export default function GuidePage() {
  // Pre-defined popular locations
  const singaporeLocations = [
    {
      id: "sg-1",
      position: [1.3521, 103.8198] as [number, number],
      name: "Jurong East MRT"
    },
    {
      id: "sg-2",
      position: [1.3644, 103.7731] as [number, number],
      name: "Boon Lay MRT"
    },
    {
      id: "sg-3",
      position: [1.4431, 103.7861] as [number, number],
      name: "Woodlands Checkpoint"
    },
    {
      id: "sg-4",
      position: [1.3387, 103.9092] as [number, number],
      name: "Changi Airport"
    }
  ];

  const forestCityLocations = [
    {
      id: "fc-1",
      position: [1.4143, 103.6357] as [number, number],
      name: "Forest City Mall"
    },
    {
      id: "fc-2",
      position: [1.4308, 103.6305] as [number, number],
      name: "Golf Resort"
    },
    {
      id: "fc-3",
      position: [1.4184, 103.6325] as [number, number],
      name: "Shattuck St. Mary's School"
    },
    {
      id: "fc-4",
      position: [1.4255, 103.6240] as [number, number],
      name: "Malaysian CIQ"
    }
  ];
  return (
    <div className="min-h-screen bg-background">
      <NavBar />
      <main className="container mx-auto py-6 px-4 pt-20">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-2">Singapore-Forest City Travel Guide</h1>
          <p className="text-muted-foreground mb-6">
            Essential information for traveling between Singapore and Forest City
          </p>
        </div>

        <div className="space-y-8">
          {/* Important Reminders */}
          <div className="grid gap-4 md:grid-cols-2">
            <Alert className="bg-amber-50 border-amber-200">
              <IdCard className="h-4 w-4 text-amber-600" />
              <AlertTitle className="text-amber-800">Passport Required</AlertTitle>
              <AlertDescription className="text-amber-700">
                Ensure your passport has at least 6 months validity.
                Many travelers forget their passports - double-check before leaving!
              </AlertDescription>
            </Alert>
            
            <Alert className="bg-blue-50 border-blue-200">
              <Clock className="h-4 w-4 text-blue-600" />
              <AlertTitle className="text-blue-800">Immigration Timing</AlertTitle>
              <AlertDescription className="text-blue-700">
                Allow 45-60 minutes for immigration during peak hours.
                Weekday mornings (Singapore entry) and evenings (Malaysia entry) are busiest.
              </AlertDescription>
            </Alert>
          </div>

          {/* Main Content Tabs */}
          <Tabs defaultValue="chartered-car" className="space-y-4">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="chartered-car">Chartered Car</TabsTrigger>
              <TabsTrigger value="public-bus">Public Bus Options</TabsTrigger>
            </TabsList>

            {/* Public Bus Options */}
            <TabsContent value="public-bus">
              <Card>
                <CardHeader>
                  <CardTitle>Public Bus Options</CardTitle>
                  <CardDescription>
                    Bus routes and schedules between Singapore and Forest City
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="font-medium">Quick Guide to Bus Travel</h4>
                    <ul className="list-disc list-inside mt-2 space-y-2">
                      <li><strong>Journey:</strong> Jurong Town Hall Bus Interchange → CIQ 2nd Link → Forest City</li>
                      <li><strong>Buses:</strong> Take CW3/CW4/CW4S/CW6/CW7, then FC1 after immigration</li>
                      <li><strong>Total fare:</strong> S$5 (through-ticketing available)</li>
                      <li><strong>Payment:</strong> Cash or ManjaLink card</li>
                      <li><strong>Travel time:</strong> ~1.5-2 hours including immigration</li>
                    </ul>
                  </div>
                  
                  <Alert className="bg-amber-50 border-amber-200 mt-4">
                    <Clock className="h-4 w-4 text-amber-600" />
                    <AlertTitle className="text-amber-800">Important Notice</AlertTitle>
                    <AlertDescription className="text-amber-700">
                      Buses from CIQ 2nd Link depart <strong>only once per hour</strong>. Missing your bus could mean a long wait!
                    </AlertDescription>
                  </Alert>
                    
                  <div className="mt-4 space-y-2">
                    <a 
                      href="https://www.causewaylink.com.my/important-announcement-for-cw3-cw4-passengers-relocating-to-jurong-town-hall-bus-interchange/" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="flex items-center text-blue-600 hover:underline text-sm"
                    >
                      <ExternalLink className="h-3 w-3 mr-1" />
                      Official CW3/CW4 Information
                    </a>
                    <a 
                      href="https://www.causewaylink.com.my/forest-city-fc1/" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="flex items-center text-blue-600 hover:underline text-sm"
                    >
                      <ExternalLink className="h-3 w-3 mr-1" />
                      FC1 Schedule Information
                    </a>
                  </div>
                  
                  <div className="mt-4">
                    <Button asChild className="w-full">
                      <a href="/bus-guide">View Full Bus Guide</a>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Chartered Car Tab */}
            <TabsContent value="chartered-car">
              <Card>
                <CardHeader>
                  <CardTitle>Chartered Car Services</CardTitle>
                  <CardDescription>
                    Trusted driver contacts for direct transportation
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">
                    These trusted drivers are frequently used by our community for transportation between Singapore and Forest City:
                  </p>

                  <div className="space-y-4 mt-4">
                    <h3 className="font-medium">Singapore to Forest City</h3>
                    <ul className="space-y-3">
                      <li className="flex items-center justify-between p-3 border rounded-md">
                        <div className="flex flex-col">
                          <span className="font-medium">Carol</span>
                          <div className="text-xs text-muted-foreground mt-1">
                            <p>Trip: SGD 75 • Additional stop: SGD 5</p>
                          </div>
                          <div className="flex gap-2 mt-2">
                            <a 
                              href="https://sgmytaxi288service.com" 
                              target="_blank" 
                              rel="noopener noreferrer" 
                              className="text-xs text-blue-500 hover:underline flex items-center"
                            >
                              <ExternalLink className="h-3 w-3 mr-1" />
                              Website
                            </a>
                            <a 
                              href="https://wa.me/60192551688" 
                              target="_blank" 
                              rel="noopener noreferrer" 
                              className="text-xs text-green-500 hover:underline flex items-center"
                            >
                              <Phone className="h-3 w-3 mr-1" />
                              WhatsApp
                            </a>
                          </div>
                        </div>
                        <span className="text-muted-foreground">+60 19-255 1688</span>
                      </li>
                      <li className="flex items-center justify-between p-3 border rounded-md">
                        <div className="flex flex-col">
                          <span className="font-medium">Ah Liang</span>
                          <div className="text-xs text-muted-foreground mt-1">
                            <p>Trip: SGD 80 • Additional stop: SGD 10</p>
                          </div>
                          <div className="flex gap-2 mt-2">
                            <a 
                              href="https://wa.me/60167244913" 
                              target="_blank" 
                              rel="noopener noreferrer" 
                              className="text-xs text-green-500 hover:underline flex items-center"
                            >
                              <Phone className="h-3 w-3 mr-1" />
                              WhatsApp
                            </a>
                          </div>
                        </div>
                        <span className="text-muted-foreground">+60 16-724 4913</span>
                      </li>
                    </ul>
                  </div>

                  <Alert className="mt-4">
                    <AlertDescription>
                      Have a trusted driver contact to share?{" "}
                      <a 
                        href="https://discordapp.com/users/474860619217108992"
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:underline"
                      >
                        Message me
                      </a>{" "}
                      to add them to this list.
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>

          {/* Payment Information */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">              
              <div className="space-y-2">
                <h3 className="font-medium">Ride Sharing Payments</h3>
                <div className="bg-slate-50 p-3 rounded-md">
                  <h4 className="font-medium text-sm mb-2">Payment Options</h4>
                  <ul className="space-y-2 text-sm">
                    <li><strong>BNPL:</strong> Awaiting Shawn's implementation.</li>
                    <li><strong>Revolut:</strong> Preferred method - fee-free transfers between users</li>
                    <li><strong>Cryptocurrency:</strong> USDC on BASE or SOL, for peer-to-peer payments</li>
                    <li><strong>Cash:</strong> Pay in SGD or RM depending on driver preference</li>
                  </ul>
                </div>

                <h3 className="font-medium mt-6">Bus Payments</h3>
                <div className="bg-slate-50 p-3 rounded-md">
                  <ul className="space-y-2 text-sm">
                    <li><strong>ManjaLink Card:</strong> Cashless payment option for regular commuters</li>
                    <li><strong>Cash: </strong>Not tested.</li>
                  </ul>
                </div>

                <div className="mt-4">
                  <a 
                    href="https://www.causewaylink.com.my/cashless-travel/?utm_source=cwl_homepage_shortcut&utm_medium=cwl_homepage_shortcut&utm_campaign=cwl_homepage_shortcut" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center text-blue-600 hover:underline text-sm"
                  >
                    <ExternalLink className="h-3 w-3 mr-1" />
                    Learn About Bus Cashless Payment Options
                  </a>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="server/auth.ts">
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./storage";
import { insertUserSchema, User as SelectUser } from "@shared/schema";

declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "dev_secret_key",
    resave: false,
    saveUninitialized: false,
    store: storage.sessionStore,
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  passport.use(
    new LocalStrategy(
      {
        usernameField: 'discordUsername',
        passwordField: 'password'
      },
      async (discordUsername, password, done) => {
        try {
          const user = await storage.getUserByDiscordUsername(discordUsername);
          if (!user || !(await comparePasswords(password, user.password))) {
            return done(null, false);
          }
          return done(null, user);
        } catch (error) {
          return done(error);
        }
      }
    ),
  );

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (error) {
      done(error);
    }
  });

  app.post("/api/register", async (req, res, next) => {
    try {
      console.log("Registration request body:", req.body);

      // Remove empty strings for optional fields
      const sanitizedData = {
        ...req.body,
        whatsappNumber: req.body.whatsappNumber || null,
        malaysianNumber: req.body.malaysianNumber || null,
        revolutUsername: req.body.revolutUsername || null,
      };

      console.log("Sanitized data:", sanitizedData);

      const userData = insertUserSchema.parse(sanitizedData);
      console.log("Parsed user data:", userData);

      const existingUser = await storage.getUserByDiscordUsername(userData.discordUsername);
      if (existingUser) {
        return res.status(400).json({ error: "Discord username already exists" });
      }

      const user = await storage.createUser({
        ...userData,
        password: await hashPassword(userData.password),
      });

      req.login(user, (err) => {
        if (err) return next(err);
        res.status(201).json(user);
      });
    } catch (error) {
      console.error("Registration validation error:", error);
      res.status(400).json({ error: error.message || "Registration failed" });
    }
  });

  app.post("/api/login", passport.authenticate("local"), (req, res) => {
    res.status(200).json(req.user);
  });

  app.post("/api/logout", (req, res, next) => {
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    res.json(req.user);
  });
  
  app.get("/api/auth/me", (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    
    // Return user info without sensitive data
    const safeUser = {
      id: req.user.id,
      discordUsername: req.user.discordUsername,
      name: req.user.name,
      whatsappNumber: req.user.whatsappNumber,
      malaysianNumber: req.user.malaysianNumber,
      revolutUsername: req.user.revolutUsername,
      isVendor: req.user.isVendor,
      companyName: req.user.companyName,
      driverDetails: req.user.driverDetails,
    };
    
    res.json(safeUser);
  });
}
</file>

<file path="client/src/components/nav-bar.tsx">
import { Link } from "wouter";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Car, LogOut, LogIn, Menu, X, Info, UserCog, Plus } from "lucide-react";
import { useState, useEffect } from "react";

export function NavBar() {
  const { user, logoutMutation } = useAuth();
  const [menuOpen, setMenuOpen] = useState(false);

  // Use a simpler approach for detecting mobile view
  const [isMobile, setIsMobile] = useState(false);

  // Set up mobile detection on mount and window resize
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const toggleMenu = () => {
    setMenuOpen(prevState => !prevState);
  };

  return (
    <nav className="border-b bg-white fixed top-0 left-0 right-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16 items-center">
          {/* Logo always visible */}
          <Link href="/" className="flex items-center text-sm font-medium">
            <Car className="h-5 w-5 mr-2" />
            <span className="text-lg font-semibold">RideShare</span>
          </Link>

          {/* Mobile menu button */}
          {isMobile && (
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleMenu}
              className="relative z-20"
              type="button"
            >
              {menuOpen ? (
                <X className="h-4 w-4" />
              ) : (
                <Menu className="h-4 w-4" />
              )}
            </Button>
          )}

          {/* Desktop navigation */}
          {!isMobile && (
            <div className="flex">
              <div className="flex items-center space-x-4">
                <Link href="/guide" className="flex items-center px-3 py-2 text-sm font-medium">
                  <Info className="h-4 w-4 mr-2" />
                  Travel Guide
                </Link>

                {user && (
                  <>
                    {user?.isVendor ? (
                      <Link href="/vendor" className="flex items-center px-3 py-2 text-sm font-medium">
                        Dashboard
                      </Link>
                    ) : (
                      <Link href="/rides/create" className="flex items-center px-3 py-2 text-sm font-medium">
                        <Plus className="h-4 w-4 mr-2" />
                        Create Ride
                      </Link>
                    )}
                    
                    <Link href="/profile" className="flex items-center px-3 py-2 text-sm font-medium">
                      <UserCog className="h-4 w-4 mr-2" />
                      Profile
                    </Link>
                  </>
                )}
              </div>

              <div className="flex items-center ml-4">
                {user ? (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => logoutMutation.mutate()}
                  >
                    <LogOut className="h-4 w-4 mr-2" />
                    Logout
                  </Button>
                ) : (
                  <Button
                    variant="ghost"
                    size="sm"
                    asChild
                  >
                    <Link href="/auth">
                      <LogIn className="h-4 w-4 mr-2" />
                      Login
                    </Link>
                  </Button>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Mobile menu */}
        {isMobile && menuOpen && (
          <div className="absolute top-16 left-0 right-0 bg-white border-b shadow-lg z-50 px-4 py-4 space-y-3">
            <Link 
              href="/guide" 
              className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md"
              onClick={() => setMenuOpen(false)}
            >
              <Info className="h-4 w-4 mr-2 inline-block" />
              Travel Guide
            </Link>

            {user && (
              <>
                {user?.isVendor ? (
                  <Link 
                    href="/vendor" 
                    className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md"
                    onClick={() => setMenuOpen(false)}
                  >
                    Dashboard
                  </Link>
                ) : (
                  <Link 
                    href="/rides/create" 
                    className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md"
                    onClick={() => setMenuOpen(false)}
                  >
                    <Plus className="h-4 w-4 mr-2 inline-block" />
                    Create Ride
                  </Link>
                )}
                
                <Link 
                  href="/profile" 
                  className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md"
                  onClick={() => setMenuOpen(false)}
                >
                  <UserCog className="h-4 w-4 mr-2 inline-block" />
                  Profile
                </Link>
              </>
            )}

            {user ? (
              <div 
                className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md cursor-pointer"
                onClick={() => {
                  logoutMutation.mutate();
                  setMenuOpen(false);
                }}
              >
                <LogOut className="h-4 w-4 mr-2 inline-block" />
                Logout
              </div>
            ) : (
              <Link 
                href="/auth" 
                className="block px-3 py-3 text-base font-medium hover:bg-gray-50 rounded-md"
                onClick={() => setMenuOpen(false)}
              >
                <LogIn className="h-4 w-4 mr-2 inline-block" />
                Login
              </Link>
            )}
          </div>
        )}
      </div>
    </nav>
  );
}
</file>

<file path="client/src/App.tsx">
import { Switch, Route, Redirect } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { AuthProvider } from "@/hooks/use-auth";
import NotFound from "@/pages/not-found";
import AuthPage from "@/pages/auth-page";
import HomePage from "@/pages/home-page";
import CreateRide from "@/pages/create-ride";
import JoinRide from "@/pages/join-ride";
import RideDetails from "@/pages/ride-details";
import VendorDashboard from "@/pages/vendor-dashboard";
import GuidePage from "@/pages/guide-page";
import BusGuidePage from "@/pages/bus-guide-page";
import ProfilePage from "@/pages/profile";
import { ProtectedRoute } from "./lib/protected-route";

function Router() {
  return (
    <Switch>
      <Route path="/auth" component={AuthPage} />
      <Route path="/">
        {() => <Redirect to="/home" />}
      </Route>
      <Route path="/home" component={HomePage} />
      <Route path="/guide" component={GuidePage} />
      <Route path="/bus-guide" component={BusGuidePage} />
      <ProtectedRoute path="/rides/create" component={CreateRide} />
      <ProtectedRoute path="/rides/edit/:id" component={CreateRide} />
      <ProtectedRoute path="/rides/:id/join" component={JoinRide} />
      <Route path="/rides/:id" component={RideDetails} />
      <ProtectedRoute path="/vendor" component={VendorDashboard} />
      <ProtectedRoute path="/profile" component={ProfilePage} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Router />
        <Toaster />
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;
</file>

<file path="client/src/pages/auth-page.tsx">
import React, { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { useAuth } from "@/hooks/use-auth";
import { InsertUser } from "@shared/schema";

export default function AuthPage() {
  const [tab, setTab] = useState("login");
  // Login form state
  const [discordUsername, setDiscordUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  // Registration form state
  const [registerData, setRegisterData] = useState<Partial<InsertUser>>({
    discordUsername: "",
    password: "",
    name: "",
    whatsappNumber: "",
    malaysianNumber: "",
    revolutUsername: "",
    isVendor: false,
    companyName: "",
    driverDetails: {
      name: "",
      contact: "",
      carNumber: ""
    }
  });

  const { loginMutation, registerMutation, user } = useAuth();
  const [, setLocation] = useLocation();

  // Handle authentication state changes
  useEffect(() => {
    if (user) {
      setLocation("/");
    }
  }, [user, setLocation]);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      loginMutation.mutate({ discordUsername, password });
    } catch (error) {
      setError("Invalid Discord username or password");
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    // Detailed validation with specific error messages
    if (!registerData.discordUsername) {
      setError("Discord username is required");
      return;
    }

    if (!registerData.password) {
      setError("Password is required");
      return;
    }

    if (registerData.password.length < 8) {
      setError("Password must be at least 8 characters long");
      return;
    }

    // Validate vendor specific fields if user is registering as vendor
    if (registerData.isVendor) {
      if (!registerData.companyName) {
        setError("Company name is required for vendors");
        return;
      }

      if (!registerData.driverDetails?.name) {
        setError("Driver name is required for vendors");
        return;
      }

      if (!registerData.driverDetails?.contact) {
        setError("Driver contact is required for vendors");
        return;
      }

      if (!registerData.driverDetails?.carNumber) {
        setError("Car number is required for vendors");
        return;
      }
    }

    try {
      registerMutation.mutate(registerData as InsertUser);
    } catch (error) {
      setError("Registration failed. Discord username may already exist.");
    }
  };

  const handleInputChange = (field: string, value: string | boolean) => {
    setRegisterData(prev => ({ ...prev, [field]: value }));
  };

  const handleDriverDetailsChange = (field: string, value: string) => {
    setRegisterData(prev => {
      const newDriverDetails = {
        ...prev.driverDetails,
        [field]: value
      };

      // Ensure all required fields are present
      if (!newDriverDetails.name) newDriverDetails.name = "";
      if (!newDriverDetails.contact) newDriverDetails.contact = "";
      if (!newDriverDetails.carNumber) newDriverDetails.carNumber = "";

      return {
        ...prev,
        driverDetails: newDriverDetails
      };
    });
  };

  return (
    <div className="container flex items-center justify-center min-h-screen py-8">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Welcome to NS RideShare</CardTitle>
          <CardDescription>
            Login or register to continue
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue={tab} onValueChange={setTab}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">Login</TabsTrigger>
              <TabsTrigger value="register">Register</TabsTrigger>
            </TabsList>
            {error && (
              <div className="bg-red-100 text-red-600 p-2 rounded mt-4 text-sm">
                {error}
              </div>
            )}
            <TabsContent value="login">
              <form onSubmit={handleLogin} className="space-y-4 mt-4">
                <div className="space-y-2">
                  <Label htmlFor="discord-username-login">Discord Username</Label>
                  <Input
                    id="discord-username-login"
                    type="text"
                    value={discordUsername}
                    onChange={(e) => setDiscordUsername(e.target.value)}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password-login">Password</Label>
                  <Input
                    id="password-login"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </div>
                <Button type="submit" className="w-full">
                  Login
                </Button>
              </form>
            </TabsContent>
            <TabsContent value="register">
              <form onSubmit={handleRegister} className="space-y-4 mt-4">
                <div className="space-y-2">
                  <Label htmlFor="discord-username-register" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                    Discord Username
                  </Label>
                  <Input
                    id="discord-username-register"
                    type="text"
                    value={registerData.discordUsername}
                    onChange={(e) => handleInputChange("discordUsername", e.target.value)}
                    required
                  />
                  <p className="text-xs text-muted-foreground">
                    This will be your login identifier
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password-register" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                    Password
                  </Label>
                  <Input
                    id="password-register"
                    type="password"
                    value={registerData.password}
                    onChange={(e) => handleInputChange("password", e.target.value)}
                    required
                    minLength={8}
                  />
                  <p className="text-xs text-muted-foreground">
                    Minimum 8 characters
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="name">Name</Label>
                  <Input
                    id="name"
                    type="text"
                    value={registerData.name}
                    onChange={(e) => handleInputChange("name", e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">Optional</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="whatsappNumber">WhatsApp Number</Label>
                  <Input
                    id="whatsappNumber"
                    type="tel"
                    placeholder="+65xxxxxxxx"
                    value={registerData.whatsappNumber || ""}
                    onChange={(e) => handleInputChange("whatsappNumber", e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">Optional, but recommended for ride coordination</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="malaysianNumber">Malaysian Phone Number</Label>
                  <Input
                    id="malaysianNumber"
                    type="tel"
                    placeholder="+60xxxxxxxx"
                    value={registerData.malaysianNumber || ""}
                    onChange={(e) => handleInputChange("malaysianNumber", e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">Optional</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="revolutUsername">Revolut Username</Label>
                  <Input
                    id="revolutUsername"
                    type="text"
                    value={registerData.revolutUsername || ""}
                    onChange={(e) => handleInputChange("revolutUsername", e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">Optional, for payment coordination</p>
                </div>

                <div className="flex items-center space-x-2 pt-4">
                  <Checkbox 
                    id="isVendor" 
                    checked={registerData.isVendor}
                    onCheckedChange={(checked) => handleInputChange("isVendor", Boolean(checked))}
                  />
                  <Label htmlFor="isVendor">Register as a vendor/driver</Label>
                </div>

                {registerData.isVendor && (
                  <div className="space-y-4 border-t pt-4 mt-4">
                    <h3 className="font-medium">Vendor Information</h3>
                    <div className="space-y-2">
                      <Label htmlFor="companyName" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                        Company Name
                      </Label>
                      <Input
                        id="companyName"
                        type="text"
                        value={registerData.companyName || ""}
                        onChange={(e) => handleInputChange("companyName", e.target.value)}
                        required={registerData.isVendor}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="driverName" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                        Driver Name
                      </Label>
                      <Input
                        id="driverName"
                        type="text"
                        value={registerData.driverDetails?.name || ""}
                        onChange={(e) => handleDriverDetailsChange("name", e.target.value)}
                        required={registerData.isVendor}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="driverContact" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                        Driver Contact
                      </Label>
                      <Input
                        id="driverContact"
                        type="tel"
                        value={registerData.driverDetails?.contact || ""}
                        onChange={(e) => handleDriverDetailsChange("contact", e.target.value)}
                        required={registerData.isVendor}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="carNumber" className="after:content-['*'] after:ml-0.5 after:text-red-500">
                        Car Number
                      </Label>
                      <Input
                        id="carNumber"
                        type="text"
                        value={registerData.driverDetails?.carNumber || ""}
                        onChange={(e) => handleDriverDetailsChange("carNumber", e.target.value)}
                        required={registerData.isVendor}
                      />
                      <p className="text-xs text-muted-foreground">Required for MDAC/SGAC compliance</p>
                    </div>
                  </div>
                )}

                <Button 
                  type="submit" 
                  className="w-full mt-6"
                  disabled={registerMutation.isPending}
                >
                  {registerMutation.isPending ? "Registering..." : "Register"}
                </Button>
              </form>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="client/src/components/ride-card.tsx">
import { Card, CardHeader, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Ride } from "@shared/schema";
import { MapPin, Calendar, Users, ArrowRightLeft, Info, User, ChevronRight } from "lucide-react";
import { Link } from "wouter";
import { formatDate, isPastDate } from "@/lib/utils";
import { useAuth } from "@/hooks/use-auth";

interface RideCardProps {
  ride: Ride;
  onJoin?: () => void;
  onAssign?: () => void;
  showActions?: boolean;
  organizerName?: string;
}

export function RideCard({ ride, onJoin, onAssign, showActions = true, organizerName }: RideCardProps) {
  const isFullyBooked = ride.currentPassengers >= ride.maxPassengers;
  const costPerPerson = Math.round(
    ride.cost / (ride.currentPassengers || 1)
  );

  // Format direction for display
  const formatDirection = (direction: string) => {
    return direction === "SG->FC" ? "Singapore to Forest City" : "Forest City to Singapore";
  };

  // Check if a ride is in the past
  const isInPast = (date: string | Date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return isPastDate(dateObj);
  };

  // Check if ride is in the past
  const ridePast = isInPast(ride.date);
  const { user } = useAuth();
  const isUserRide = user && ride.creatorId === user.id;

  return (
    <Link href={`/rides/${ride.id}`}>
      <Card className={`w-full transition-all duration-200 hover:shadow-lg hover:border-primary/50 cursor-pointer group ${ridePast ? 'opacity-60' : ''}`}>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <div className="flex items-center space-x-2">
            <ArrowRightLeft className="h-4 w-4" />
            <div>
              <h3 className="font-semibold">{formatDirection(ride.direction)}</h3>
              <p className="text-sm text-muted-foreground">
                <User className="h-3 w-3 inline-block mr-1" />
                {organizerName || (ride as any).creatorName || "Unknown Organizer"}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {ridePast ? (
              <Badge variant="outline">Past</Badge>
            ) : isFullyBooked ? (
              <Badge variant="secondary">Full</Badge>
            ) : isUserRide ? (
              <Badge variant="outline" className="bg-blue-50 border-blue-200 text-blue-700">
                Your Ride
              </Badge>
            ) : (
              <Badge variant="default" className="bg-green-600 hover:bg-green-700">
                Join
              </Badge>
            )}
            <ChevronRight className="h-4 w-4 text-muted-foreground transition-transform group-hover:translate-x-1" />
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex items-center text-sm">
              <Calendar className="h-4 w-4 mr-2" />
              {formatDate(new Date(ride.date))}
            </div>
            <div className="flex items-center text-sm">
              <MapPin className="h-4 w-4 mr-2" />
              <span>{ride.direction === "FC->SG" ? "To: " : "From: "}{ride.pickupLocation}</span>
            </div>
            <div className="flex items-center text-sm">
              <Users className="h-4 w-4 mr-2" />
              {ride.currentPassengers} / {ride.maxPassengers} passengers
            </div>
            <div className="mt-4">
              <p className="text-sm font-medium">
                Cost per person: ${costPerPerson} SGD
              </p>
              {ride.additionalStops > 0 && (
                <p className="text-xs text-muted-foreground">
                  +${ride.additionalStops * 5} SGD for {ride.additionalStops} additional stops
                </p>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </Link>
  );
}
</file>

<file path="server/routes.ts">
import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth } from "./auth";
import { insertRideSchema, insertRidePassengerSchema, insertDriverContactSchema, type User } from "@shared/schema";

export async function registerRoutes(app: Express): Promise<Server> {
  setupAuth(app);

  // Driver contact routes
  app.get("/api/driver-contacts", async (req, res) => {
    const contacts = await storage.getActiveDriverContacts();
    res.json(contacts);
  });

  app.post("/api/driver-contacts", async (req, res) => {
    if (!req.isAuthenticated() || !req.user.isVendor) {
      return res.sendStatus(401);
    }

    try {
      const contactData = insertDriverContactSchema.parse(req.body);
      const contact = await storage.createDriverContact(contactData);
      res.status(201).json(contact);
    } catch (error) {
      console.error("Driver contact creation error:", error);
      res.status(400).json({ error: (error as Error).message });
    }
  });

  // Ride management routes
  app.post("/api/rides", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    try {
      // Parse the incoming data
      const requestData = req.body;

      // Convert the ISO string date to a proper Date object
      if (requestData.date && typeof requestData.date === 'string') {
        requestData.date = new Date(requestData.date);
      }

      // Validate dropoffLocations format
      if (!Array.isArray(requestData.dropoffLocations)) {
        return res.status(400).json({ error: "dropoffLocations must be an array" });
      }

      // Ensure each dropoff location has the correct format
      requestData.dropoffLocations = requestData.dropoffLocations.map((loc: any) => ({
        location: typeof loc === 'string' ? loc : loc.location,
        passengerCount: typeof loc === 'string' ? 1 : (loc.passengerCount || 1)
      }));

      // Now validate with zod
      const rideData = insertRideSchema.parse(requestData);

      const ride = await storage.createRide({
        ...rideData,
        creatorId: req.user.id,
      });
      res.status(201).json(ride);
    } catch (error) {
      console.error("Ride creation error:", error);
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.get("/api/stats", async (req, res) => {
    const rides = await storage.getRides();
    const users = await storage.getAllUsers();
    res.json({
      totalRides: rides.length,
      totalUsers: users.length,
      sgToFcRides: rides.filter(r => r.direction === "SG->FC").length,
      fcToSgRides: rides.filter(r => r.direction === "FC->SG").length
    });
  });

app.get("/api/rides", async (req, res) => {
    const rides = await storage.getRides();
    res.json(rides);
  });
  
  app.get("/api/rides/user/joined", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    
    try {
      const joinedRides = await storage.getUserJoinedRides(req.user.id);
      res.json(joinedRides);
    } catch (error) {
      console.error("Error fetching user joined rides:", error);
      res.status(500).json({ error: "Server error fetching joined rides" });
    }
  });

  app.get("/api/rides/:id", async (req, res) => {
    const rideId = parseInt(req.params.id);
    console.log(`Fetching ride with ID: ${rideId}`);

    if (isNaN(rideId)) {
      console.log(`Invalid ride ID: ${req.params.id}`);
      return res.status(400).json({ error: "Invalid ride ID" });
    }

    try {
      const ride = await storage.getRide(rideId);
      if (!ride) {
        console.log(`Ride with ID ${rideId} not found in database`);
        return res.status(404).json({ error: "Ride not found" });
      }

      // Get detailed creator information
      const creator = await storage.getUser(ride.creatorId);
      
      // Add creator details to the ride object
      const rideWithCreator = {
        ...ride,
        creator: creator ? {
          id: creator.id,
          name: creator.name,
          discordUsername: creator.discordUsername,
          whatsappNumber: creator.whatsappNumber,
          malaysianNumber: creator.malaysianNumber,
          revolutUsername: creator.revolutUsername
        } : undefined
      };

      console.log(`Successfully retrieved ride with ID ${rideId}`);
      res.json(rideWithCreator);
    } catch (error) {
      console.error(`Error fetching ride with ID ${rideId}:`, error);
      res.status(500).json({ error: "Server error fetching ride" });
    }
  });

  app.patch("/api/rides/:id", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    try {
      const rideId = parseInt(req.params.id);
      const ride = await storage.getRide(rideId);

      if (!ride) {
        return res.status(404).json({ error: "Ride not found" });
      }

      // Check if user is the creator
      if (req.user.id !== ride.creatorId) {
        return res.status(403).json({ error: "Not authorized to edit this ride" });
      }

      // Only allow editing certain fields
      const allowedUpdates = [
        'date', 
        'maxPassengers', 
        'pickupLocation', 
        'dropoffLocations',
        'cost',
        'additionalStops'
      ];

      const updates: Partial<typeof ride> = {};
      for (const key of allowedUpdates) {
        if (req.body[key] !== undefined) {
          // @ts-ignore
          updates[key] = req.body[key];
        }
      }

      // Handle date conversion if provided as string
      if (updates.date && typeof updates.date === 'string') {
        updates.date = new Date(updates.date);
      }

      // Don't allow increasing maxPassengers to less than current
      if (updates.maxPassengers !== undefined && 
          updates.maxPassengers < ride.currentPassengers) {
        return res.status(400).json({ 
          error: "Cannot decrease max passengers below current passengers count" 
        });
      }

      const updatedRide = await storage.updateRide(rideId, updates);
      res.json(updatedRide);
    } catch (error) {
      console.error("Ride update error:", error);
      res.status(400).json({ error: (error as Error).message });
    }
  });
  
  app.delete("/api/rides/:id", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    try {
      const rideId = parseInt(req.params.id);
      const ride = await storage.getRide(rideId);

      if (!ride) {
        return res.status(404).json({ error: "Ride not found" });
      }

      // Check if user is the creator
      if (req.user.id !== ride.creatorId) {
        return res.status(403).json({ error: "Not authorized to delete this ride" });
      }
      
      // Get the passengers for this ride
      const passengers = await storage.getPassengers(rideId);
      
      // Check if anyone besides the creator has joined
      const nonCreatorPassengers = passengers.filter(p => p.userId !== req.user.id);
      if (nonCreatorPassengers.length > 0) {
        return res.status(400).json({ 
          error: "Cannot delete ride with other passengers. Ask them to leave first." 
        });
      }

      // Delete the ride
      await storage.deleteRide(rideId);
      res.json({ success: true, message: "Ride deleted successfully" });
    } catch (error) {
      console.error("Ride deletion error:", error);
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.post("/api/rides/:id/join", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    const rideId = parseInt(req.params.id);

    // Check if rideId is NaN
    if (isNaN(rideId)) {
      console.log(`Invalid ride ID for join request: ${req.params.id}`);
      return res.status(400).json({ error: "Invalid ride ID" });
    }

    try {
      const passengerData = insertRidePassengerSchema.parse({
        ...req.body,
        rideId: rideId,
      });

      const ride = await storage.getRide(passengerData.rideId);
      if (!ride) return res.status(404).json({ error: "Ride not found" });

      // Get current total passenger count
      const passengers = await storage.getPassengers(rideId);
      const currentTotalPassengers = passengers.reduce((sum, p) => sum + (p.passengerCount || 1), 0);

      // Check if adding new passengers would exceed the limit
      if (currentTotalPassengers + (passengerData.passengerCount || 1) > ride.maxPassengers) {
        return res.status(400).json({ error: "Not enough spots available" });
      }

      const passenger = await storage.addPassenger({
        ...passengerData,
        userId: req.user.id,
      });
      res.status(201).json(passenger);
    } catch (error) {
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.get("/api/rides/:id/passengers", async (req, res) => {
    const rideId = parseInt(req.params.id);

    if (isNaN(rideId)) {
      console.log(`Invalid ride ID for passengers request: ${req.params.id}`);
      return res.status(400).json({ error: "Invalid ride ID" });
    }

    try {
      const passengers = await storage.getPassengers(rideId);

      if (!req.isAuthenticated()) {
        const safePassengers = passengers.map(p => ({
          id: p.id,
          rideId: p.rideId,
          dropoffLocation: p.dropoffLocation,
          dropoffSequence: p.dropoffSequence,
        }));
        return res.json(safePassengers);
      }

      const passengersWithUserDetails = await Promise.all(
        passengers.map(async (passenger) => {
          const user = await storage.getUser(passenger.userId);
          return {
            ...passenger,
            user: user ? {
              id: user.id,
              discordUsername: user.discordUsername,
              name: user.name, // Assuming 'name' is correct field, adjust if needed
              whatsappNumber: user.whatsappNumber,
              malaysianNumber: user.malaysianNumber,
              revolutUsername: user.revolutUsername,
            } : undefined,
          };
        })
      );

      res.json(passengersWithUserDetails);
    } catch (error) {
      console.error(`Error fetching passengers for ride ${rideId}:`, error);
      res.status(500).json({ error: "Server error fetching passengers" });
    }
  });

  app.patch("/api/rides/:id/passengers/:passengerId/sequence", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    const rideId = parseInt(req.params.id);
    const passengerId = parseInt(req.params.passengerId);
    const { sequence } = req.body;

    const ride = await storage.getRide(rideId);
    if (!ride) return res.status(404).json({ error: "Ride not found" });
    if (ride.creatorId !== req.user.id) return res.status(403).json({ error: "Not authorized" });

    if (ride.direction !== "FC->SG") {
      return res.status(400).json({ error: "Sequence can only be set for FC->SG rides" });
    }

    try {
      const passenger = await storage.updatePassengerSequence(passengerId, sequence);
      res.json(passenger);
    } catch (error) {
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.post("/api/rides/:id/lockSequence", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);

    const rideId = parseInt(req.params.id);

    const ride = await storage.getRide(rideId);
    if (!ride) return res.status(404).json({ error: "Ride not found" });
    if (ride.creatorId !== req.user.id) return res.status(403).json({ error: "Not authorized" });

    if (ride.direction !== "FC->SG") {
      return res.status(400).json({ error: "Sequence can only be locked for FC->SG rides" });
    }

    try {
      const passengers = await storage.getPassengers(rideId);

      for (let i = 0; i < passengers.length; i++) {
        const passenger = passengers[i];
        if (passenger.dropoffSequence === null) {
          await storage.updatePassengerSequence(passenger.id, i + 1);
        }
      }

      res.json({ success: true });
    } catch (error) {
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.post("/api/rides/:id/assign", async (req, res) => {
    if (!req.isAuthenticated() || !req.user.isVendor) {
      return res.sendStatus(401);
    }

    try {
      const rideId = parseInt(req.params.id);
      const ride = await storage.assignVendor(rideId, req.user.id);
      res.json(ride);
    } catch (error) {
      res.status(400).json({ error: (error as Error).message });
    }
  });

  app.get("/api/vendor/rides", async (req, res) => {
    if (!req.isAuthenticated() || !req.user.isVendor) {
      return res.sendStatus(401);
    }

    const rides = await storage.getVendorRides(req.user.id);
    res.json(rides);
  });
  
  // User profile update endpoint
  app.patch("/api/users/:id", async (req, res) => {
    console.log(`Profile update request for user ID: ${req.params.id}`);
    
    if (!req.isAuthenticated()) {
      console.log("User not authenticated for profile update");
      return res.status(401).json({ error: "Not authenticated" });
    }
    
    const userId = parseInt(req.params.id);
    console.log(`Authenticated user ID: ${req.user.id}, requested user ID: ${userId}`);
    
    // User can only update their own profile
    if (req.user.id !== userId) {
      console.log("User attempted to update someone else's profile");
      return res.status(403).json({ error: "You can only update your own profile" });
    }
    
    try {
      console.log("Profile update request body:", req.body);
      
      // Fields that are allowed to be updated
      const allowedFields = ['name', 'whatsappNumber', 'malaysianNumber', 'revolutUsername'];
      const updates: Partial<User> = {};
      
      // Filter the request body to only include allowed fields
      for (const field of allowedFields) {
        if (req.body[field] !== undefined) {
          updates[field as keyof typeof updates] = req.body[field];
        }
      }
      
      console.log("Filtered updates to apply:", updates);
      
      const updatedUser = await storage.updateUser(userId, updates);
      console.log("User updated successfully:", updatedUser.id);
      
      // Return the updated user without sensitive information
      const safeUser = {
        id: updatedUser.id,
        discordUsername: updatedUser.discordUsername,
        name: updatedUser.name,
        whatsappNumber: updatedUser.whatsappNumber,
        malaysianNumber: updatedUser.malaysianNumber,
        revolutUsername: updatedUser.revolutUsername,
        isVendor: updatedUser.isVendor,
      };
      
      console.log("Sending updated user data");
      res.json(safeUser);
    } catch (error) {
      console.error(`Error updating user ${userId}:`, error);
      res.status(400).json({ error: (error as Error).message });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
</file>

<file path="client/src/pages/home-page.tsx">
import { useQuery } from "@tanstack/react-query";
import { NavBar } from "@/components/nav-bar";
import { RideCard } from "@/components/ride-card";
import { useAuth } from "@/hooks/use-auth";
import { Ride } from "@shared/schema";
import { Loader2, Map, Share2, Info, Edit, UserPlus, ArrowUpDown, Filter, Plus } from "lucide-react";
import { useLocation } from "wouter";
import { SequenceManager } from "@/components/sequence-manager";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { isPastDate } from "@/lib/utils";

export default function HomePage() {
  const { user } = useAuth();
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<string>("all");
  const [sortOption, setSortOption] = useState<string>("dateAsc");
  const [directionFilter, setDirectionFilter] = useState<string>("all");

  // Fetch all rides
  const { data: rides, isLoading: isLoadingRides } = useQuery<Ride[]>({
    queryKey: ["/api/rides"],
  });

  // Fetch rides that the user has joined (but not created)
  const { data: joinedRides, isLoading: isLoadingJoined } = useQuery<Ride[]>({
    queryKey: ["/api/rides/user/joined"],
    enabled: !!user && activeTab === 'my-rides', // Only fetch when user is logged in and on My Rides tab
  });

  // Fetch statistics
  const { data: stats, isLoading: isLoadingStats } = useQuery({
    queryKey: ['/api/stats'],
  });

  // Generate shareable trip summary
  const generateTripSummary = (ride: Ride) => {
    const directionText = ride.direction === "SG->FC" ? "Singapore to Forest City" : "Forest City to Singapore";
    const dateText = new Date(ride.date).toLocaleString();
    const totalCost = ride.cost + (ride.additionalStops * 5);
    const perPersonCost = (totalCost / (ride.maxPassengers || 1)).toFixed(2);

    const summary = `🚗 RideShare Trip Summary 🚗\n\n` +
      `Direction: ${directionText}\n` +
      `Date & Time: ${dateText}\n` +
      `${ride.direction === "FC->SG" ? "Drop-off Location" : "Pickup Location"}: ${ride.direction === "FC->SG" ? ride.dropoffLocations[0]?.location || 'Unknown' : ride.pickupLocation}\n` +
      `Passengers: ${ride.currentPassengers}/${ride.maxPassengers}\n` +
      `Total Cost: $${totalCost} SGD\n\n` +
      `📱 Join through RideShare: https://ns-rideshare.replit.app/rides/${ride.id}`;

    try {
      navigator.clipboard.writeText(summary);
      toast({
        title: "Trip summary copied to clipboard!",
        description: "You can now paste it in WhatsApp or other messaging apps.",
      });
    } catch (error) {
      toast({
        title: "Failed to copy",
        description: "Please try again or copy the text manually.",
        variant: "destructive",
      });
    }
  };

  const isLoading = isLoadingRides || isLoadingStats || (activeTab === 'my-rides' && isLoadingJoined);

  if (isLoading) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="flex items-center justify-center min-h-[80vh]">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </div>
    );
  }

  // Get rides created by the user
  const userCreatedRides = rides?.filter(ride =>
    user && ride.creatorId === user.id
  ) || [];

  // Combine created and joined rides for My Rides tab
  const myRides = [
    ...(userCreatedRides || []),
    ...(joinedRides || [])
  ];

  // Helper to check if a ride is in the past
  const isRidePast = (ride: Ride) => {
    return isPastDate(new Date(ride.date));
  };

  // Filter rides based on active tab and direction
  let filteredRides = activeTab === 'all'
    ? rides
    : (activeTab === 'my-rides' ? myRides : []);

  // Apply direction filter
  if (directionFilter !== 'all') {
    filteredRides = filteredRides?.filter(ride => ride.direction === directionFilter) || [];
  }

  // Sort rides
  const sortedRides = [...(filteredRides || [])].sort((a, b) => {
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);

    // Remove past rides (optional, can be handled by filter too)
    const isPastA = isRidePast(a);
    const isPastB = isRidePast(b);

    // If both are past or both are future, sort according to selected option
    if (isPastA === isPastB) {
      switch (sortOption) {
        case 'dateAsc':
          return dateA.getTime() - dateB.getTime();
        case 'dateDesc':
          return dateB.getTime() - dateA.getTime();
        default:
          return dateA.getTime() - dateB.getTime();
      }
    }

    // Put future rides before past ones
    return isPastA ? 1 : -1;
  });

  // Get rides created by the user that are in the FC->SG direction
  const userFCtoSGRides = userCreatedRides.filter(ride =>
    ride.direction === "FC->SG"
  ) || [];

  return (
    <div className="min-h-screen">
      <NavBar />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pt-20">{/* Added pt-20 for navbar spacing */}
        {stats && (
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8 max-w-lg mx-auto">
            <Card className="bg-gradient-to-br from-blue-50 to-purple-50">
              <CardContent className="pt-8 pb-6 text-center">
                <div className="text-3xl font-bold text-blue-600">{stats.totalRides}</div>
                <p className="text-sm text-blue-600/80 mt-2 font-medium">Total Rides</p>
              </CardContent>
            </Card>
            <Card className="bg-gradient-to-br from-green-50 to-blue-50">
              <CardContent className="pt-8 pb-6 text-center">
                <div className="text-3xl font-bold text-green-600">{stats.totalUsers}</div>
                <p className="text-sm text-green-600/80 mt-2 font-medium">Total Users</p>
              </CardContent>
            </Card>
          </div>
        )}
        {/* Create Ride Button - only show when logged in */}
        {user && !user?.isVendor && (
          <div className="mb-8 flex justify-center">
            <Button 
              size="lg" 
              className="w-full max-w-md py-6 text-lg"
              onClick={() => setLocation("/rides/create")}
            >
              <Plus className="h-5 w-5 mr-2" />
              Create New Ride
            </Button>
          </div>
        )}

        {/* Login Benefits Banner - Show only when user is not logged in */}
        {!user && (
          <Card className="mb-8 bg-primary/5 border-primary/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <UserPlus className="h-5 w-5" />
                Join RideShare Community
              </CardTitle>
              <CardDescription>
                Login to unlock full features and start sharing rides
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4 md:grid-cols-3">
                <div className="space-y-2">
                  <h3 className="font-medium">Create Rides</h3>
                  <p className="text-sm text-muted-foreground">
                    Organize your own rides and set your preferred schedule
                  </p>
                </div>
                <div className="space-y-2">
                  <h3 className="font-medium">Join Existing Rides</h3>
                  <p className="text-sm text-muted-foreground">
                    Find and join rides that match your travel plans
                  </p>
                </div>
                <div className="space-y-2">
                  <h3 className="font-medium">Manage Your Trips</h3>
                  <p className="text-sm text-muted-foreground">
                    Track your rides and communicate with co-passengers
                  </p>
                </div>
              </div>
              <div className="mt-6 flex justify-center">
                <Button size="lg" onClick={() => setLocation("/auth")}>
                  Login or Register Now
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold">Rides</h1>
            <TabsList>
              <TabsTrigger value="all">All Rides</TabsTrigger>
              <TabsTrigger value="my-rides">My Rides</TabsTrigger>
            </TabsList>
          </div>

          {/* Filtering and Sorting Controls */}
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1">
              <Select value={directionFilter} onValueChange={setDirectionFilter}>
                <SelectTrigger className="w-full">
                  <div className="flex items-center">
                    <Filter className="mr-2 h-4 w-4" />
                    <SelectValue placeholder="Filter by direction" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Directions</SelectItem>
                  <SelectItem value="SG->FC">Singapore to Forest City</SelectItem>
                  <SelectItem value="FC->SG">Forest City to Singapore</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex-1">
              <Select value={sortOption} onValueChange={setSortOption}>
                <SelectTrigger className="w-full">
                  <div className="flex items-center">
                    <ArrowUpDown className="mr-2 h-4 w-4" />
                    <SelectValue placeholder="Sort rides" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dateAsc">Earliest First</SelectItem>
                  <SelectItem value="dateDesc">Latest First</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <TabsContent value="all" className="space-y-8">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {sortedRides.map((ride) => (
                <RideCard
                  key={ride.id}
                  ride={ride}
                  onJoin={() => setLocation(`/rides/${ride.id}/join`)}
                  onAssign={
                    user?.isVendor
                      ? () => setLocation(`/vendor?rideId=${ride.id}`)
                      : undefined
                  }
                />
              ))}
              {sortedRides.length === 0 && (
                <p className="text-muted-foreground col-span-full text-center py-8">
                  No rides available at the moment.
                </p>
              )}
            </div>
          </TabsContent>

          <TabsContent value="my-rides" className="space-y-8">
            {/* Only show sequence management for user's FC->SG rides */}
            {userFCtoSGRides.length > 0 && (
              <div className="mb-8">
                <h2 className="text-lg font-semibold mb-4">Manage Drop-off Sequence</h2>
                <p className="text-sm text-muted-foreground mb-4">
                  For rides from Forest City to Singapore, you can set the order in which passengers will be dropped off.
                </p>

                {userFCtoSGRides.map(ride => (
                  <div key={ride.id} className="mb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-md font-medium">
                        Ride on {new Date(ride.date).toLocaleDateString()}
                      </h3>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => generateTripSummary(ride)}
                        className="flex items-center"
                      >
                        <Share2 className="h-4 w-4 mr-2" />
                        Share Summary
                      </Button>
                    </div>
                    <SequenceManager rideId={ride.id} />
                  </div>
                ))}
              </div>
            )}

            {/* Display rides organized by the user */}
            {userCreatedRides.length > 0 && (
              <div className="mb-8">
                <h2 className="text-lg font-semibold mb-4">Rides You Organized</h2>
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {userCreatedRides.map((ride) => (
                    <div key={ride.id} className="relative">
                      <RideCard
                        ride={ride}
                        showActions={false}
                      />
                      <div className="mt-2 flex justify-end gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => generateTripSummary(ride)}
                          className="flex items-center"
                        >
                          <Share2 className="h-4 w-4 mr-1" />
                          Share
                        </Button>
                        <Button
                          size="sm"
                          onClick={() => setLocation(`/rides/edit/${ride.id}`)}
                          className="flex items-center"
                        >
                          <Edit className="h-4 w-4 mr-1" />
                          Edit
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Display rides joined by the user */}
            {joinedRides && joinedRides.length > 0 && (
              <div>
                <h2 className="text-lg font-semibold mb-4">Rides You Joined</h2>
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {joinedRides.map((ride) => (
                    <div key={ride.id} className="relative">
                      <RideCard
                        ride={ride}
                        showActions={false}
                      />
                      <div className="mt-2 flex justify-end gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => generateTripSummary(ride)}
                          className="flex items-center"
                        >
                          <Share2 className="h-4 w-4 mr-1" />
                          Share
                        </Button>
                        <Button
                          size="sm"
                          onClick={() => setLocation(`/rides/${ride.id}`)}
                          className="flex items-center"
                        >
                          <Info className="h-4 w-4 mr-1" />
                          View Details
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Show message if no rides */}
            {myRides.length === 0 && (
              <p className="text-muted-foreground col-span-full text-center py-8">
                You haven't created or joined any rides yet.
              </p>
            )}
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
</file>

<file path="shared/schema.ts">
import { pgTable, text, serial, integer, boolean, timestamp, json } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  discordUsername: text("discord_username").notNull().unique(),
  password: text("password").notNull(),
  name: text("name"),
  whatsappNumber: text("whatsapp_number"),
  malaysianNumber: text("malaysian_number"),
  revolutUsername: text("revolut_username"),
  isVendor: boolean("is_vendor").notNull().default(false),
  companyName: text("company_name"),
  driverDetails: json("driver_details").$type<{
    name: string;
    contact: string;
    carNumber: string;
  }>(),
});

export const driverContacts = pgTable("driver_contacts", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  whatsappNumber: text("whatsapp_number").notNull(),
  malaysianNumber: text("malaysian_number"),
  vehicleType: text("vehicle_type").notNull(),
  notes: text("notes"),
  isActive: boolean("is_active").notNull().default(true),
});

export const rides = pgTable("rides", {
  id: serial("id").primaryKey(),
  creatorId: integer("creator_id").notNull(),
  direction: text("direction").notNull(), // SG->FC or FC->SG
  date: timestamp("date").notNull(),
  maxPassengers: integer("max_passengers").notNull(),
  currentPassengers: integer("current_passengers").notNull().default(0),
  pickupLocation: text("pickup_location").notNull(),
  dropoffLocations: json("dropoff_locations").$type<{
    location: string;
    passengerCount: number;
  }[]>().notNull(),
  status: text("status").notNull().default("open"), // open, assigned, completed
  vendorId: integer("vendor_id"),
  driverContactId: integer("driver_contact_id"),
  cost: integer("cost").notNull().default(80),
  additionalStops: integer("additional_stops").notNull().default(0),
});

export const ridePassengers = pgTable("ride_passengers", {
  id: serial("id").primaryKey(),
  rideId: integer("ride_id").notNull(),
  userId: integer("user_id").notNull(),
  dropoffLocation: text("dropoff_location").notNull(),
  dropoffSequence: integer("dropoff_sequence"),
  passengerCount: integer("passenger_count").notNull().default(1),
});

export const insertUserSchema = createInsertSchema(users)
  .pick({
    discordUsername: true,
    password: true,
    name: true,
    whatsappNumber: true,
    malaysianNumber: true,
    revolutUsername: true,
    isVendor: true,
    companyName: true,
    driverDetails: true,
  })
  .extend({
    password: z.string().min(8),
    name: z.string().optional(),
    whatsappNumber: z.string()
      .nullable()
      .optional()
      .transform(val => {
        if (!val || val === "") return null;
        return val;
      }),
    malaysianNumber: z.string()
      .nullable()
      .optional()
      .transform(val => {
        if (!val || val === "") return null;
        return val;
      }),
    revolutUsername: z.string()
      .nullable()
      .optional()
      .transform(val => {
        if (!val || val === "") return null;
        return val;
      }),
  });

export const insertDriverContactSchema = createInsertSchema(driverContacts)
  .pick({
    name: true,
    whatsappNumber: true,
    malaysianNumber: true,
    vehicleType: true,
    notes: true,
    isActive: true,
  });

export const insertRideSchema = createInsertSchema(rides)
  .pick({
    direction: true,
    date: true,
    maxPassengers: true,
    pickupLocation: true,
    dropoffLocations: true,
    driverContactId: true,
  })
  .extend({
    organizerPassengerCount: z.number().min(1).max(4),
    dropoffLocations: z.array(
      z.object({
        location: z.string(),
        passengerCount: z.number().min(1).max(4)
      })
    ),
    driverContactId: z.number().optional(),
  });

export const insertRidePassengerSchema = createInsertSchema(ridePassengers)
  .pick({
    rideId: true,
    dropoffLocation: true,
  })
  .extend({
    passengerCount: z.number().min(1).max(4),
  });

export type InsertUser = z.infer<typeof insertUserSchema>;
export type InsertDriverContact = z.infer<typeof insertDriverContactSchema>;
export type InsertRide = z.infer<typeof insertRideSchema>;
export type InsertRidePassenger = z.infer<typeof insertRidePassengerSchema>;
export type User = typeof users.$inferSelect;
export type DriverContact = typeof driverContacts.$inferSelect;
export type Ride = typeof rides.$inferSelect;
export type RidePassenger = typeof ridePassengers.$inferSelect;
</file>

<file path="client/src/pages/create-ride.tsx">
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertRideSchema, type InsertRide } from "@shared/schema";
import { z } from "zod";
import { NavBar } from "@/components/nav-bar";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useLocation, useRoute } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { useState, useEffect } from "react";
import { formatForDateTimeInput } from "@/lib/utils";

// Define types for the form data
interface DropoffLocation {
  location: string;
  passengerCount: number;
}

interface RideData {
  id?: string;
  creatorId?: string;
  direction: "SG->FC" | "FC->SG";
  date: Date | string;
  maxPassengers: number;
  pickupLocation?: string;
  dropoffLocations?: DropoffLocation[] | string[];
  organizerPassengerCount?: number;
}

export default function CreateRide() {
  const [location, setLocation] = useLocation();
  const [, params] = useRoute("/rides/edit/:id");
  const isEditing = !!params?.id;
  const rideId = params?.id;
  const { toast } = useToast();
  const { user } = useAuth();
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // Fetch ride data if editing
  const { data: rideToEdit, isLoading } = useQuery<RideData>({
    queryKey: [`/api/rides/${rideId}`],
    enabled: isEditing,
  });

  // Extended form schema with organizerLocation field
  const formSchema = insertRideSchema.extend({
    organizerLocation: z.string().min(1, "Please specify your location"),
    organizerPassengerCount: insertRideSchema.shape.organizerPassengerCount.default(1),
    dropoffLocations: insertRideSchema.shape.dropoffLocations.default([])
  });

  // Form setup with validation
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      direction: "SG->FC",
      date: new Date(),
      maxPassengers: 5,
      pickupLocation: "",
      dropoffLocations: [],
      organizerPassengerCount: 1,
      organizerLocation: "",
    },
    mode: "onBlur", // Validate fields when they lose focus
  });

  // Load ride data into form when editing
  useEffect(() => {
    if (isEditing && rideToEdit && !isLoading) {
      if (user?.id !== rideToEdit.creatorId) {
        toast({
          title: "Error",
          description: "You are not authorized to edit this ride",
          variant: "destructive",
        });
        setLocation("/home");
        return;
      }

      // Convert ISO string date to Date object
      const date = new Date(rideToEdit.date);

      // Ensure we have a valid passengerCount
      const passengerCount = 
        Array.isArray(rideToEdit.dropoffLocations) && rideToEdit.dropoffLocations[0] && 
        typeof rideToEdit.dropoffLocations[0] === 'object' && 'passengerCount' in rideToEdit.dropoffLocations[0]
          ? rideToEdit.dropoffLocations[0].passengerCount
          : typeof rideToEdit.organizerPassengerCount === 'number' 
            ? rideToEdit.organizerPassengerCount 
            : 1;

      // Extract organizer location based on direction
      let organizerLocation = "";
      
      if (rideToEdit.direction === "SG->FC") {
        // For SG->FC, the organizer location is the pickup location
        organizerLocation = rideToEdit.pickupLocation || "";
      } else {
        // For FC->SG, the organizer location is the first dropoff location
        if (Array.isArray(rideToEdit.dropoffLocations) && rideToEdit.dropoffLocations[0]) {
          if (typeof rideToEdit.dropoffLocations[0] === 'object' && 'location' in rideToEdit.dropoffLocations[0]) {
            organizerLocation = rideToEdit.dropoffLocations[0].location;
          } else if (typeof rideToEdit.dropoffLocations[0] === 'string') {
            organizerLocation = rideToEdit.dropoffLocations[0];
          }
        }
      }

      // Reset form with ride data
      form.reset({
        direction: rideToEdit.direction,
        date,
        maxPassengers: rideToEdit.maxPassengers,
        pickupLocation: rideToEdit.pickupLocation || "",
        dropoffLocations: [],  // We'll manage this separately
        organizerPassengerCount: passengerCount,
        organizerLocation: organizerLocation,
      });
    }
  }, [rideToEdit, isEditing, isLoading, form, toast, setLocation, user]);

  // Watch form fields for dynamic updates
  const currentDirection = form.watch('direction');
  const organizerLocation = form.watch('organizerLocation');
  const organizerPassengerCount = form.watch('organizerPassengerCount');

  // Update dropoffLocations whenever organizerLocation or organizerPassengerCount changes
  useEffect(() => {
    if (organizerLocation && organizerPassengerCount) {
      if (currentDirection === "FC->SG") {
        form.setValue(
          "dropoffLocations",
          [{ location: organizerLocation.trim(), passengerCount: organizerPassengerCount }],
          { shouldValidate: true }
        );
      }
    }
  }, [organizerLocation, organizerPassengerCount, currentDirection, form]);

  // Mutation for creating or updating a ride
  const rideMutation = useMutation({
    mutationFn: async (data: any) => {
      const submissionData = { ...data };

      // Ensure date is properly formatted for submission
      if (submissionData.date instanceof Date) {
        // Convert to ISO string for storage
        submissionData.date = submissionData.date.toISOString();
      } else if (typeof submissionData.date === 'string') {
        // If date is already a string, parse it first to ensure it's valid
        const date = new Date(submissionData.date);
        if (isNaN(date.getTime())) {
          throw new Error("Invalid date provided");
        }
        submissionData.date = date.toISOString();
      }

      // Ensure organizerPassengerCount is a number
      submissionData.organizerPassengerCount = Number(submissionData.organizerPassengerCount);
      if (isNaN(submissionData.organizerPassengerCount) || submissionData.organizerPassengerCount < 1) {
        submissionData.organizerPassengerCount = 1;
      }

      // Set pickupLocation based on direction
      if (submissionData.direction === "FC->SG") {
        submissionData.pickupLocation = "Forest City"; // Fixed pickup point for FC->SG
      } else {
        submissionData.pickupLocation = submissionData.organizerLocation.trim(); // Organizer's pickup for SG->FC
      }

      // Format dropoff locations based on direction
      if (submissionData.direction === "FC->SG") {
        // For FC->SG, use the already formatted dropoffLocations (set by useEffect)
        // We don't need to do anything as it's already correctly formatted
      } else {
        // For SG->FC, set dropoffLocations to the organizer's pickup location
        submissionData.dropoffLocations = [{
          location: submissionData.organizerLocation.trim(),
          passengerCount: Number(submissionData.organizerPassengerCount)
        }];
      }

      // Remove temporary field
      delete submissionData.organizerLocation;

      // Send request to API
      if (isEditing && rideId) {
        const res = await apiRequest("PATCH", `/api/rides/${rideId}`, submissionData);
        return res.json();
      } else {
        const res = await apiRequest("POST", "/api/rides", submissionData);
        return res.json();
      }
    },
    onSuccess: (ride) => {
      queryClient.invalidateQueries({ queryKey: ["/api/rides"] });
      queryClient.invalidateQueries({ queryKey: [`/api/rides/${rideId}`] });

      toast({
        title: "Success",
        description: isEditing ? "Ride updated successfully" : "Ride created successfully",
      });

      setLocation(`/rides/${ride.id}`);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Delete mutation - moved inside component
  const deleteMutation = useMutation({
    mutationFn: async () => {
      if (!rideId) throw new Error("No ride ID provided");
      const res = await apiRequest("DELETE", `/api/rides/${rideId}`);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/rides"] });

      toast({
        title: "Success",
        description: "Ride deleted successfully",
      });

      setLocation("/home");
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Handle delete function - moved inside component
  const handleDeleteRide = () => {
    if (showDeleteConfirm) {
      deleteMutation.mutate();
    } else {
      setShowDeleteConfirm(true);
      toast({
        title: "Confirm Deletion",
        description: "Click Delete again to confirm. This action cannot be undone.",
        variant: "destructive",
      });

      setTimeout(() => {
        setShowDeleteConfirm(false);
      }, 5000);
    }
  };

  // Ensure organizerPassengerCount has a default value when switching directions
  useEffect(() => {
    const currentValue = form.getValues('organizerPassengerCount');
    if (!currentValue || isNaN(Number(currentValue))) {
      form.setValue('organizerPassengerCount', 1);
    }
  }, [currentDirection, form]);

  return (
    <div className="min-h-screen pt-20">
      <NavBar />
      <main className="max-w-3xl mx-auto px-4 py-8">
        <Card>
          <CardHeader>
            <CardTitle>{isEditing ? "Edit Ride" : "Create a New Ride"}</CardTitle>
            <CardDescription>
              {currentDirection === "FC->SG" 
                ? "Enter your drop-off location in Singapore and the number of passengers in your group"
                : "Enter your pickup location in Singapore and the number of passengers"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit((data) => {
                  rideMutation.mutate(data);
                })}
                className="space-y-6"
              >
                {/* Direction Selection */}
                <FormField
                  control={form.control}
                  name="direction"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel>Direction</FormLabel>
                      <FormControl>
                        <div className="flex flex-col md:flex-row gap-3">
                          <Button
                            type="button"
                            variant={field.value === "SG->FC" ? "default" : "outline"}
                            className="flex-1 justify-center py-6 text-base"
                            onClick={() => field.onChange("SG->FC")}
                          >
                            Singapore to Forest City
                          </Button>
                          <Button
                            type="button"
                            variant={field.value === "FC->SG" ? "default" : "outline"}
                            className="flex-1 justify-center py-6 text-base"
                            onClick={() => field.onChange("FC->SG")}
                          >
                            Forest City to Singapore
                          </Button>
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Max Passengers */}
                <FormField
                  control={form.control}
                  name="maxPassengers"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Maximum Total Passengers</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          min="1"
                          max="10"
                          {...field}
                          onChange={(e) => field.onChange(parseInt(e.target.value))}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Date and Time */}
                <FormField
                  control={form.control}
                  name="date"
                  render={({ field: { value, onChange, ...fieldProps } }) => {
                    // Format date for datetime-local input
                    const dateValue = value instanceof Date 
                      ? formatForDateTimeInput(value)
                      : '';

                    return (
                      <FormItem>
                        <FormLabel>Date and Time</FormLabel>
                        <FormControl>
                          <Input 
                            type="datetime-local" 
                            value={dateValue}
                            onChange={(e) => {
                              if (e.target.value) {
                                // When user inputs date, store it directly
                                const inputDate = new Date(e.target.value);
                                if (!isNaN(inputDate.getTime())) {
                                  onChange(inputDate);
                                }
                              }
                            }}
                            {...fieldProps}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    );
                  }}
                />

                {/* Locations Section */}
                <div className="space-y-4 pt-2">
                  <h3 className="font-medium">Locations</h3>

                  {/* Passenger Count - Same for both directions */}
                  <FormField
                    control={form.control}
                    name="organizerPassengerCount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Number of Passengers at Your Location</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="1"
                            max="4"
                            {...field}
                            value={field.value === undefined || field.value === null ? 1 : field.value}
                            onChange={(e) => {
                              const value = parseInt(e.target.value);
                              // Ensure value is valid, defaulting to 1 if parsing fails
                              field.onChange(isNaN(value) ? 1 : Math.max(1, Math.min(4, value)));
                            }}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Organizer Location - dynamic label based on direction */}
                  <FormField
                    control={form.control}
                    name="organizerLocation"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>
                          {currentDirection === "SG->FC" 
                            ? "Your Pickup Location in Singapore" 
                            : "Your Drop-off Location in Singapore"}
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            {...field} 
                            placeholder={
                              currentDirection === "SG->FC" 
                                ? "e.g., Pasir Ris MRT" 
                                : "e.g., Tampines Mall"
                            }
                            className="min-h-[100px]"
                          />
                        </FormControl>
                        <p className="text-xs text-muted-foreground mt-1">
                          You can enter multiple lines of text for detailed location instructions
                        </p>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Submit and Delete Buttons */}
                <div className="space-y-4">
                  <Button
                    type="submit"
                    className="w-full"
                    disabled={rideMutation.isPending}
                  >
                    {rideMutation.isPending 
                      ? isEditing ? "Updating..." : "Creating..." 
                      : isEditing ? "Update Ride" : "Create Ride"
                    }
                  </Button>

                  {isEditing && (
                    <Button
                      type="button"
                      variant="destructive"
                      className="w-full"
                      onClick={handleDeleteRide}
                      disabled={deleteMutation.isPending}
                    >
                      {deleteMutation.isPending ? "Deleting..." : "Delete Ride"}
                    </Button>
                  )}
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
</file>

<file path="server/storage.ts">
import {
  type User,
  type InsertUser,
  type Ride,
  type InsertRide,
  type RidePassenger,
  type InsertRidePassenger,
  type DriverContact,
  type InsertDriverContact,
  users,
  rides,
  ridePassengers,
  driverContacts,
} from "@shared/schema";
import session from "express-session";
import connectPg from "connect-pg-simple";
import { eq } from "drizzle-orm";
import { db, pool } from "./db";

const PostgresSessionStore = connectPg(session);

export interface IStorage {
  // User operations 
  getAllUsers(): Promise<User[]>;
  getUser(id: number): Promise<User | undefined>;
  getUserByDiscordUsername(discordUsername: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, userData: Partial<User>): Promise<User>;

  // Driver contact operations
  createDriverContact(contact: InsertDriverContact): Promise<DriverContact>;
  getDriverContact(id: number): Promise<DriverContact | undefined>;
  getActiveDriverContacts(): Promise<DriverContact[]>;

  // Ride operations
  createRide(ride: InsertRide & { creatorId: number }): Promise<Ride>;
  getRide(id: number): Promise<Ride | undefined>;
  getRides(): Promise<Ride[]>;
  updateRide(id: number, ride: Partial<Ride>): Promise<Ride>;
  deleteRide(id: number): Promise<void>;
  getUserJoinedRides(userId: number): Promise<Ride[]>;

  // Ride passenger operations
  addPassenger(passenger: InsertRidePassenger & { userId: number }): Promise<RidePassenger>;
  getPassengers(rideId: number): Promise<RidePassenger[]>;
  updatePassengerSequence(id: number, sequence: number): Promise<RidePassenger>;

  // Vendor operations
  getVendorRides(vendorId: number): Promise<Ride[]>;
  assignVendor(rideId: number, vendorId: number): Promise<Ride>;

  sessionStore: session.Store;
}

export class DatabaseStorage implements IStorage {
  sessionStore: session.Store;

  async getAllUsers(): Promise<User[]> {
    return await db.select().from(users);
  }

  constructor() {
    this.sessionStore = new PostgresSessionStore({
      pool,
      createTableIfMissing: true,
    });
  }

  async getUser(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user;
  }

  async getUserByDiscordUsername(discordUsername: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.discordUsername, discordUsername));
    return user;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const [user] = await db.insert(users).values(insertUser).returning();
    return user;
  }

  async updateUser(id: number, userData: Partial<User>): Promise<User> {
    // Only allow updating specific fields for security
    const allowedFields = ['name', 'whatsappNumber', 'malaysianNumber', 'revolutUsername'];
    const updateData: Partial<User> = {};

    for (const field of allowedFields) {
      if (field in userData) {
        updateData[field as keyof typeof updateData] = userData[field as keyof typeof userData];
      }
    }

    const [updatedUser] = await db
      .update(users)
      .set(updateData)
      .where(eq(users.id, id))
      .returning();

    if (!updatedUser) {
      throw new Error(`User with ID ${id} not found`);
    }

    return updatedUser;
  }

  async createDriverContact(contact: InsertDriverContact): Promise<DriverContact> {
    const [newContact] = await db.insert(driverContacts).values(contact).returning();
    return newContact;
  }

  async getDriverContact(id: number): Promise<DriverContact | undefined> {
    const [contact] = await db.select().from(driverContacts).where(eq(driverContacts.id, id));
    return contact;
  }

  async getActiveDriverContacts(): Promise<DriverContact[]> {
    return await db
      .select()
      .from(driverContacts)
      .where(eq(driverContacts.isActive, true));
  }

  async createRide(ride: InsertRide & { creatorId: number }): Promise<Ride> {
    // Validate dropoff locations
    if (!ride.dropoffLocations || ride.dropoffLocations.length === 0) {
      throw new Error("At least one dropoff location is required");
    }

    // Calculate additional stops based on dropoff locations
    const additionalStops = Math.max(0, ride.dropoffLocations.length - 1);

    // Set default cost
    const cost = 80;

    const [newRide] = await db
      .insert(rides)
      .values({
        ...ride,
        currentPassengers: ride.dropoffLocations[0].passengerCount, // Set initial passengers from first location
        status: "open",
        vendorId: null,
        additionalStops,
        cost,
      } as any)
      .returning();

    // Add creator as first passenger
    await this.addPassenger({
      rideId: newRide.id,
      userId: ride.creatorId,
      dropoffLocation: ride.dropoffLocations[0].location,
      passengerCount: ride.dropoffLocations[0].passengerCount,
    });

    return newRide;
  }

  async getRide(id: number): Promise<Ride | undefined> {
    const [ride] = await db.select().from(rides).where(eq(rides.id, id));

    if (!ride) return undefined;

    // Get all passengers for this ride
    const passengers = await this.getPassengers(id);

    // Calculate total passengers count from all joined passengers
    const totalPassengers = passengers.reduce((sum, p) => sum + (p.passengerCount || 1), 0);

    // Update the ride's current passenger count
    const updatedRide = {
      ...ride,
      currentPassengers: totalPassengers
    };

    // Get creator details
    const creator = await this.getUser(ride.creatorId);
    return {
      ...updatedRide,
      creatorName: creator ? creator.name || creator.discordUsername : "Unknown"
    };
  }

  async getRides(): Promise<Ride[]> {
    const allRides = await db.select().from(rides);

    // Fetch all passengers for all rides and creator details
    const ridesWithDetails = await Promise.all(
      allRides.map(async (ride) => {
        // Get passengers for this ride
        const passengers = await this.getPassengers(ride.id);

        // Calculate total passengers
        const totalPassengers = passengers.reduce((sum, p) => sum + (p.passengerCount || 1), 0);

        // Get creator details
        const creator = await this.getUser(ride.creatorId);

        return {
          ...ride,
          currentPassengers: totalPassengers,
          creatorName: creator ? creator.name || creator.discordUsername : "Unknown",
        };
      })
    );

    return ridesWithDetails;
  }

  async updateRide(id: number, ride: Partial<Ride>): Promise<Ride> {
    const [updatedRide] = await db
      .update(rides)
      .set(ride)
      .where(eq(rides.id, id))
      .returning();
    if (!updatedRide) throw new Error("Ride not found");
    return updatedRide;
  }

  async deleteRide(id: number): Promise<void> {
    // First delete passengers
    await db
      .delete(ridePassengers)
      .where(eq(ridePassengers.rideId, id));

    // Then delete the ride
    const result = await db
      .delete(rides)
      .where(eq(rides.id, id))
      .returning();

    if (result.length === 0) throw new Error("Ride not found");
  }

  async addPassenger(
    passenger: InsertRidePassenger & { userId: number }
  ): Promise<RidePassenger> {
    // Validate that dropoff location exists
    if (!passenger.dropoffLocation) {
      throw new Error("Dropoff location is required");
    }

    const [newPassenger] = await db
      .insert(ridePassengers)
      .values({ ...passenger, dropoffSequence: null })
      .returning();

    const ride = await this.getRide(passenger.rideId);
    if (ride) {
      await this.updateRide(ride.id, {
        currentPassengers: ride.currentPassengers + passenger.passengerCount,
      });
    }

    return newPassenger;
  }

  async getPassengers(rideId: number): Promise<RidePassenger[]> {
    return await db
      .select()
      .from(ridePassengers)
      .where(eq(ridePassengers.rideId, rideId));
  }

  async updatePassengerSequence(
    id: number,
    sequence: number
  ): Promise<RidePassenger> {
    const [passenger] = await db
      .update(ridePassengers)
      .set({ dropoffSequence: sequence })
      .where(eq(ridePassengers.id, id))
      .returning();
    if (!passenger) throw new Error("Passenger not found");
    return passenger;
  }

  async getVendorRides(vendorId: number): Promise<Ride[]> {
    const vendorRides = await db.select().from(rides).where(eq(rides.vendorId, vendorId));

    // Fetch creator details for each ride
    const ridesWithCreatorInfo = await Promise.all(
      vendorRides.map(async (ride) => {
        const creator = await this.getUser(ride.creatorId);
        return {
          ...ride,
          creatorName: creator ? creator.name || creator.discordUsername : "Unknown",
        };
      })
    );

    return ridesWithCreatorInfo;
  }

  async getUserJoinedRides(userId: number): Promise<Ride[]> {
    // Get all rides where the user is a passenger (but not the creator)
    const passengers = await db
      .select()
      .from(ridePassengers)
      .where(eq(ridePassengers.userId, userId));

    // Extract ride IDs from passenger records
    const rideIds = passengers.map(p => p.rideId);

    if (rideIds.length === 0) {
      return [];
    }

    // Get all rides with those IDs
    const joinedRides = await db
      .select()
      .from(rides)
      .where(
        // Using a more complex filter since we don't have a direct "in" operator
        rideIds.map(id => eq(rides.id, id)).reduce((acc, condition) => {
          if (!acc) return condition;
          return { type: 'or', left: acc, right: condition } as any;
        }, null as any)
      );

    // Filter out rides created by the user and add creator info
    const filteredRides = joinedRides.filter(ride => ride.creatorId !== userId);

    // Fetch creator details for each ride
    const ridesWithCreatorInfo = await Promise.all(
      filteredRides.map(async (ride) => {
        const creator = await this.getUser(ride.creatorId);
        return {
          ...ride,
          creatorName: creator ? creator.name || creator.discordUsername : "Unknown",
        };
      })
    );

    return ridesWithCreatorInfo;
  }

  async assignVendor(rideId: number, vendorId: number): Promise<Ride> {
    const [ride] = await db
      .update(rides)
      .set({ vendorId, status: "assigned" })
      .where(eq(rides.id, rideId))
      .returning();
    if (!ride) throw new Error("Ride not found");
    return ride;
  }
}

export const storage = new DatabaseStorage();

export async function getAllUsers(): Promise<User[]> {
  return db.query.users.findMany();
}

export async function getUser(userId: string | number): Promise<User | undefined> {
  return db.query.users.findFirst({
    where: eq(users.id, Number(userId)),
  });
}
</file>

<file path="client/src/pages/ride-details.tsx">
import { useEffect, useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useRoute, useLocation } from "wouter";
import { NavBar } from "@/components/nav-bar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Loader2, Share2, Edit, MapPin, Users, MessageCircle, Calendar, DollarSign, Clock, CheckCircle, ChevronRight, AlertTriangle, Phone, Mail, User } from "lucide-react";
import { LocationMap } from "@/components/map/location-map";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { RideCard } from "@/components/ride-card";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import type { Ride } from "@shared/schema";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { formatDate, isPastDate } from "@/lib/utils";

// Update the interfaces to match the new schema
interface LocationPoint {
  id: string;
  position: [number, number];
  name: string;
}

interface RidePassenger {
  id: number;
  rideId: number;
  userId: number;
  dropoffLocation: string;
  dropoffSequence: number | null;
  passengerCount: number;
  user?: {
    id: number;
    discordUsername: string;
    name: string | null;
    whatsappNumber: string | null;
    malaysianNumber: string | null;
    revolutUsername: string | null;
  };
}

// Update creator type to match the new schema
interface RideWithCreator extends Ride {
  creator?: {
    id: number;
    name: string | null;
    discordUsername: string;
    whatsappNumber: string | null;
    malaysianNumber: string | null;
    revolutUsername: string | null;
  };
}

// Form schema for joining a ride
const joinRideSchema = z.object({
  passengerCount: z.number()
    .min(1, "Must have at least 1 passenger")
    .max(4, "Cannot exceed 4 passengers"),
  dropoffLocation: z.string().min(1, "Drop-off location is required"),
});

type JoinRideFormData = z.infer<typeof joinRideSchema>;

// Add this component for contact display
function ContactInfo({ 
  label, 
  value, 
  icon: Icon, 
  type 
}: { 
  label: string; 
  value: string | null; 
  icon: any;
  type?: 'whatsapp' | 'discord';
}) {
  if (!value) return null;

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            className="h-8 px-2"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              if (type) {
                openDirectMessage(type, value);
              }
            }}
          >
            <Icon className="h-4 w-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>{label}: {value}</p>
          {type && <p className="text-xs text-muted-foreground">Click to open chat</p>}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}


export default function RideDetails() {
  const [, params] = useRoute("/rides/:id");
  const rideId = params?.id;
  const [, navigate] = useLocation();
  const { user } = useAuth();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("details");
  const [dropoffLocations, setDropoffLocations] = useState<LocationPoint[]>([]);

  // Update the type of ride to include creator
  const { data: ride, isLoading: isRideLoading } = useQuery<RideWithCreator>({
    queryKey: [`/api/rides/${rideId}`],
    enabled: !!rideId,
  });

  // Passengers data fetch - only if user is authenticated
  const {
    data: passengers,
    isLoading: isPassengersLoading,
    refetch: refetchPassengers
  } = useQuery<RidePassenger[]>({
    queryKey: [`/api/rides/${rideId}/passengers`],
    enabled: !!rideId && !!user,
  });

  // Form for joining ride
  const form = useForm<JoinRideFormData>({
    resolver: zodResolver(joinRideSchema),
    defaultValues: {
      passengerCount: 1,
      dropoffLocation: "",
    },
  });

  // Join ride mutation
  const joinRideMutation = useMutation({
    mutationFn: async (data: JoinRideFormData) => {
      if (!user) throw new Error("You must be logged in to join a ride");
      if (!ride) throw new Error("Ride not found");

      const res = await apiRequest(
        "POST",
        `/api/rides/${rideId}/join`,
        {
          ...data,
          rideId: parseInt(rideId || "0")
        }
      );
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/rides/${rideId}`] });
      queryClient.invalidateQueries({ queryKey: [`/api/rides/${rideId}/passengers`] });
      refetchPassengers();
      toast({
        title: "Success",
        description: "You have joined the ride",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Process drop-off locations once ride data is loaded
  useEffect(() => {
    if (!ride) return;

    // Convert ride drop-off locations to map format
    const locations: LocationPoint[] = [];

    // Add pickup location
    if (ride.pickupLocation) {
      locations.push({
        id: 'pickup',
        position: [1.3421, 103.7998], // This should be replaced with actual coordinates
        name: ride.pickupLocation
      });
    }

    // Add dropoff locations from ride
    ride.dropoffLocations.forEach((loc, index) => {
      const locationName = typeof loc === 'string' ? loc : (loc.location || 'Unknown location');
      locations.push({
        id: `dropoff-${index}`,
        position: [1.3521 + (index * 0.01), 103.8198 + (index * 0.01)], // This should be replaced with actual coordinates
        name: locationName
      });
    });

    // Add passenger dropoff locations
    passengers?.forEach((passenger, index) => {
      if (!locations.some(loc => loc.name === passenger.dropoffLocation)) {
        locations.push({
          id: `passenger-${index}`,
          position: [1.3621 + (index * 0.01), 103.8298 + (index * 0.01)], // This should be replaced with actual coordinates
          name: passenger.dropoffLocation
        });
      }
    });

    setDropoffLocations(locations);
  }, [ride, passengers]);

  // Check if the current user is already a passenger
  const isUserPassenger = passengers?.some(p => p.userId === user?.id);

  // Check if the user is the ride creator
  const isCreator = user && ride && user.id === ride.creator?.id;
  const creator = ride?.creator;


  // Calculate remaining spots
  const totalPassengersCount = ride?.currentPassengers || 0;
  const remainingSpots = ride ? ride.maxPassengers - totalPassengersCount : 0;
  const isFull = remainingSpots <= 0;

  // Format date for display (using our shared utility)
  const formatDateTime = (dateString: string | Date) => {
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return formatDate(date);
  };
  
  // Check if the ride is in the past
  const isRidePast = (dateString: string | Date) => {
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return isPastDate(date);
  };

  // Format direction for display
  const formatDirection = (direction: string) => {
    return direction === "SG->FC" ? "Singapore to Forest City" : "Forest City to Singapore";
  };

  // Handle form submission
  const onSubmit = (data: JoinRideFormData) => {
    if (remainingSpots < data.passengerCount) {
      toast({
        title: "Error",
        description: `Only ${remainingSpots} spots remaining`,
        variant: "destructive",
      });
      return;
    }
    joinRideMutation.mutate(data);
  };

  // Generate a WhatsApp group link with all passengers
  const createWhatsAppGroup = () => {
    if (!passengers || passengers.length === 0) {
      toast({
        title: "Error",
        description: "No passengers to add to WhatsApp group",
        variant: "destructive",
      });
      return;
    }

    // Filter passengers with WhatsApp numbers
    const phoneNumbers = passengers
      .filter(p => p.user?.whatsappNumber)
      .map(p => {
        const number = p.user?.whatsappNumber?.replace(/\D/g, '');
        return number ? `${p.user?.name || p.user?.discordUsername}: ${number}` : null;
      })
      .filter(Boolean)
      .join('\n');

    if (!phoneNumbers) {
      toast({
        title: "No WhatsApp Numbers",
        description: "None of the passengers have registered their WhatsApp numbers",
        variant: "destructive",
      });
      return;
    }

    // Create group name based on ride details
    const groupName = `RideShare: ${formatDirection(ride?.direction || "")} ${formatDateTime(ride?.date || new Date())}`;

    const messageText = `Create a WhatsApp group:\n\nGroup Name: "${groupName}"\n\nAdd these contacts:\n${phoneNumbers}`;

    navigator.clipboard.writeText(messageText);

    toast({
      title: "WhatsApp Group Info Copied!",
      description: "1. Open WhatsApp\n2. Click 'New Group'\n3. Add the copied contacts",
    });
  };

  // Generate a Discord invite text
  const createDiscordGroup = () => {
    if (!passengers || passengers.length === 0) {
      toast({
        title: "Error",
        description: "No passengers to add to Discord group",
        variant: "destructive",
      });
      return;
    }

    // Filter passengers with Discord usernames
    const discordUsers = passengers
      .filter(p => p.user?.discordUsername)
      .map(p => p.user?.discordUsername)
      .join(', ');

    if (!discordUsers) {
      toast({
        title: "No Discord Usernames",
        description: "None of the passengers have registered their Discord usernames",
        variant: "destructive",
      });
      return;
    }

    // Create group name based on ride details
    const groupName = `RideShare: ${formatDirection(ride?.direction || "")} ${formatDateTime(ride?.date || new Date())}`;

    // Copy Discord usernames to clipboard
    const messageText = `Create a Discord group called "${groupName}" with these users:\n\n${
      passengers
        .filter(p => p.user?.discordUsername)
        .map(p => `${p.user?.fullName}: ${p.user?.discordUsername}`)
        .join('\n')
    }`;

    navigator.clipboard.writeText(messageText);

    toast({
      title: "Copied to Clipboard",
      description: "Discord usernames copied. Open Discord and create a new group with these users.",
    });
  };

  // Generate shareable trip summary
  const generateTripSummary = () => {
    if (!ride) return;

    const directionText = formatDirection(ride.direction);
    const dateText = formatDateTime(ride.date);
    const totalCost = ride.cost + (ride.additionalStops * 5);
    // Cost explanation more detailed based on passenger count
    const costDetails = totalCost === ride.cost ? 
      `$${totalCost} SGD` : 
      `$${ride.cost} SGD + $${ride.additionalStops * 5} SGD for additional stops`;

    // Format all locations
    const locationsText = ride.direction === "SG->FC" ?
      `Pickup: ${ride.pickupLocation}` :
      `Pickup: Forest City\nDrop-offs: ${ride.dropoffLocations.map(loc => 
        typeof loc === 'string' ? loc : loc.location
      ).join(', ')}`;

    const summary = `🚗 RideShare Trip Summary 🚗\n\n` +
      `Direction: ${directionText}\n` +
      `Date & Time: ${dateText}\n` +
      `${ride.direction === "FC->SG" ? "Drop-off Location" : "Pickup Location"}: ${ride.pickupLocation}\n` +
      `Passengers: ${totalPassengersCount}/${ride.maxPassengers}\n` +
      `Total Cost: ${costDetails}\n\n` +
      `📱 Join through RideShare: https://ns-rideshare.replit.app/rides/${ride.id}`;

    try {
      navigator.clipboard.writeText(summary);
      toast({
        title: "Trip summary copied to clipboard!",
        description: "You can now paste it in WhatsApp or other messaging apps.",
      });
    } catch (error) {
      toast({
        title: "Failed to copy",
        description: "Please try again or copy the text manually.",
        variant: "destructive",
      });
    }
  };

  // Add direct messaging function
  const openDirectMessage = (type: 'whatsapp' | 'discord', contact: string | null) => {
    if (!contact) {
      toast({
        title: "Contact not available",
        description: `No ${type} contact information provided.`,
        variant: "destructive",
      });
      return;
    }

    let url = '';
    if (type === 'whatsapp') {
      // Remove any non-numeric characters from phone number
      const cleanNumber = contact.replace(/\D/g, '');
      url = `https://wa.me/${cleanNumber}`;
    } else if (type === 'discord') {
      // Copy Discord username to clipboard
      navigator.clipboard.writeText(contact);
      toast({
        title: "Discord username copied!",
        description: "Open Discord and search for this username to start a conversation.",
      });
      return;
    }

    if (url) {
      window.open(url, '_blank');
    }
  };

  if (isRideLoading) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="flex items-center justify-center min-h-[80vh]">
          <Loader2 className="h-8 w-8 animate-spin text-border" />
        </div>
      </div>
    );
  }

  if (!ride) {
    return (
      <div className="min-h-screen">
        <NavBar />
        <div className="max-w-3xl mx-auto px-4 py-8">
          <Card className="text-center">
            <CardHeader>
              <CardTitle>Ride Not Found</CardTitle>
              <CardDescription>
                The ride you're looking for could not be found.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="mb-6 text-muted-foreground">
                The ride may have been cancelled or doesn't exist. Please check the ride ID and try again.
              </p>
              <div className="flex justify-center gap-4">
                <Button variant="outline" onClick={() => navigate("/home")}>
                  View Available Rides
                </Button>
                <Button onClick={() => navigate("/rides/create")}>
                  Create a New Ride
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pb-16 pt-16"> {/* Add padding-top for fixed navbar */}
      <NavBar />
      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="grid gap-6">
          {/* Ride Card */}
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold mb-1">
                {formatDirection(ride.direction)}
              </h1>
              <p className="text-muted-foreground">
                {formatDateTime(ride.date)}
              </p>
            </div>
            <div className="flex gap-2">
              {isCreator && (
                <Button variant="outline" onClick={() => navigate(`/rides/edit/${ride.id}`)}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Ride
                </Button>
              )}
              <Button variant="outline" onClick={generateTripSummary}>
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
            </div>
          </div>

          {/* Status Badge */}
          <div className="flex items-center gap-4">
            <Badge variant="outline" className="px-3 py-1 text-sm bg-green-50 border-green-200 text-green-700">
              {ride.status === "open" ? "Open" : ride.status === "assigned" ? "Driver Assigned" : "Completed"}
            </Badge>

            <div className="text-sm text-muted-foreground">
              <Users className="inline-block h-4 w-4 mr-1" />
              {totalPassengersCount}/{ride.maxPassengers} passengers
            </div>

            {isFull && (
              <Badge variant="outline" className="bg-amber-50 border-amber-200 text-amber-700">
                Full
              </Badge>
            )}
          </div>

          {/* Main Content Tabs */}
          <Tabs defaultValue="details" value={activeTab} onValueChange={setActiveTab} className="mt-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="details">Details</TabsTrigger>
              <TabsTrigger value="passengers">
                Passengers
                {!user && <span className="ml-1 opacity-60">(Login required)</span>}
              </TabsTrigger>
              <TabsTrigger value="map">Map</TabsTrigger>
            </TabsList>

            {/* Details Tab */}
            <TabsContent value="details" className="space-y-6 pt-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Ride Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="flex items-start">
                        <Calendar className="h-5 w-5 mr-2 text-muted-foreground shrink-0 mt-0.5" />
                        <div>
                          <h4 className="font-medium">Date & Time</h4>
                          <p className="text-sm text-muted-foreground">{formatDateTime(ride.date)}</p>
                        </div>
                      </div>

                      <div className="flex items-start">
                        <MapPin className="h-5 w-5 mr-2 text-muted-foreground shrink-0 mt-0.5" />
                        <div>
                          <h4 className="font-medium">
                            {ride.direction === "SG->FC" ? "Pickup Location" : "Dropoff Locations"}
                          </h4>
                          <p className="text-sm text-muted-foreground">
                            {ride.direction === "SG->FC"
                              ? ride.pickupLocation
                              : ride.dropoffLocations.map(loc => 
                                  typeof loc === 'string' ? loc : loc.location
                                ).join(", ")}
                          </p>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <div className="flex items-start">
                        <DollarSign className="h-5 w-5 mr-2 text-muted-foreground shrink-0 mt-0.5" />
                        <div>
                          <h4 className="font-medium">Cost</h4>
                          <div className="text-sm text-muted-foreground">
                            <div className="flex justify-between gap-4">
                              <span>Base Cost:</span>
                              <span>${ride.cost} SGD</span>
                            </div>
                            {ride.additionalStops > 0 && (
                              <div className="flex justify-between gap-4">
                                <span>Additional Stops:</span>
                                <span>${ride.additionalStops * 5} SGD</span>
                              </div>
                            )}
                            <div className="flex justify-between gap-4 font-medium">
                              <span>Total Cost:</span>
                              <span>${ride.cost + (ride.additionalStops * 5)} SGD</span>
                            </div>
                            <div className="flex justify-between gap-4 text-green-600">
                              <span>Per Person (if full):</span>
                              <span>${((ride.cost + (ride.additionalStops * 5)) / ride.maxPassengers).toFixed(2)} SGD</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {!isCreator && user && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Ride Organizer</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">{ride.creator?.name || ride.creator?.discordUsername || "Unknown"}</p>
                          <p className="text-sm text-muted-foreground">Organizer</p>
                        </div>
                        <div className="flex space-x-1">
                          <ContactInfo
                            label="WhatsApp"
                            value={ride.creator?.whatsappNumber}
                            icon={Phone}
                            type="whatsapp"
                          />
                          <ContactInfo
                            label="Malaysian Number"
                            value={ride.creator?.malaysianNumber}
                            icon={Phone}
                          />
                          <ContactInfo
                            label="Discord"
                            value={ride.creator?.discordUsername}
                            icon={Mail}
                            type="discord"
                          />
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Join Ride Section */}
              {user && !isCreator && !isUserPassenger && !isFull && !isRidePast(ride.date) && (
                <Card className="border-green-200 bg-green-50">
                  <CardHeader>
                    <CardTitle className="text-lg">Join This Ride</CardTitle>
                    <CardDescription>
                      There are {remainingSpots} spots left on this ride
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField
                          control={form.control}
                          name="passengerCount"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Number of Passengers</FormLabel>
                              <FormControl>
                                <Input
                                  type="number"
                                  min={1}
                                  max={Math.min(4, remainingSpots)}
                                  {...field}
                                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                                />
                              </FormControl>
                              <FormDescription>
                                Maximum {Math.min(4, remainingSpots)} passengers allowed
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="dropoffLocation"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Drop-off Location</FormLabel>
                              <FormControl>
                                <Input {...field} placeholder="Enter your drop-off location" />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <Button
                          type="submit"
                          className="w-full"
                          disabled={joinRideMutation.isPending}
                        >
                          {joinRideMutation.isPending ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Joining...
                            </>
                          ) : (
                            "Join Ride"
                          )}
                        </Button>
                      </form>
                    </Form>
                  </CardContent>
                </Card>
              )}

              {/* Already Joined Section */}
              {user && isUserPassenger && (
                <Card className={`border-blue-200 ${isRidePast(ride.date) ? 'bg-gray-100' : 'bg-blue-50'}`}>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <CheckCircle className="h-5 w-5 mr-2 text-blue-600" />
                      {isRidePast(ride.date) ? "This Ride Is Completed" : "You've Joined This Ride"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className={`text-sm ${isRidePast(ride.date) ? 'text-gray-600' : 'text-blue-700'} mb-4`}>
                      {isRidePast(ride.date) 
                        ? "This ride has already taken place." 
                        : "You're all set for this trip! The ride organizer will confirm details closer to the departure date."}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-blue-300 hover:border-blue-400 hover:bg-blue-100 text-blue-800"
                      onClick={() => navigate(`/home`)}
                    >
                      View Your Rides
                    </Button>
                  </CardContent>
                </Card>
              )}

              {/* Past Ride Message */}
              {isRidePast(ride.date) && !isUserPassenger && (
                <Card className="border-gray-200 bg-gray-50">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <AlertTriangle className="h-5 w-5 mr-2 text-gray-600" />
                      This Ride Is In The Past
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-gray-600 mb-4">
                      This ride has already taken place and is no longer available to join.
                    </p>
                  </CardContent>
                </Card>
              )}

              {/* Not Logged In section */}
              {!user && (
                <Card className="border-amber-200 bg-amber-50">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <AlertTriangle className="h-5 w-5 mr-2 text-amber-600" />
                      Login Required
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-amber-700 mb-4">
                      You need to login to join this ride or view passenger information.
                    </p>
                    <Button
                      className="w-full bg-amber-600 hover:bg-amber-700"
                      onClick={() => navigate(`/auth`)}
                    >
                      Login or Register
                    </Button>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            {/* Passengers Tab */}
            <TabsContent value="passengers" className="space-y-6 pt-4">
              {!user ? (
                <Card>
                  <CardHeader>
                    <CardTitle>Login Required</CardTitle>
                    <CardDescription>
                      You need to login to view passenger information
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Button
                      onClick={() => navigate("/auth")}
                      className="w-full"
                    >
                      Login or Register
                    </Button>
                  </CardContent>
                </Card>
              ) : isPassengersLoading ? (
                <div className="flex justify-center py-12">
                  <Loader2 className="h-8 w-8 animate-spin text-border" />
                </div>
              ) : passengers && passengers.length > 0 ? (
                <div className="space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">
                        Passengers ({totalPassengersCount}/{ride.maxPassengers})
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {passengers.map((passenger, index) => (
                          <div key={passenger.id} className="border rounded-md p-3">
                            <div className="flex justify-between items-start">
                              <div>
                                <h4 className="font-medium">{passenger.user?.name || passenger.user?.discordUsername || "Unknown User"}</h4>
                                <p className="text-sm text-muted-foreground">
                                  {passenger.dropoffLocation}
                                  {passenger.dropoffSequence && (
                                    <Badge variant="secondary" className="ml-2">
                                      Stop #{passenger.dropoffSequence}
                                    </Badge>
                                  )}
                                </p>
                                <p className="text-sm text-muted-foreground mt-1">
                                  Passengers: {passenger.passengerCount || 1}
                                </p>
                              </div>
                              <div className="flex items-center space-x-1">
                                {passenger.user && (
                                  <>
                                    <ContactInfo
                                      label="WhatsApp"
                                      value={passenger.user.whatsappNumber}
                                      icon={Phone}
                                      type="whatsapp"
                                    />
                                    <ContactInfo
                                      label="Malaysian Number"
                                      value={passenger.user.malaysianNumber}
                                      icon={Phone}
                                    />
                                    <ContactInfo
                                      label="Discord"
                                      value={passenger.user.discordUsername}
                                      icon={Mail}
                                      type="discord"
                                    />
                                    <ContactInfo
                                      label="Revolut"
                                      value={passenger.user.revolutUsername}
                                      icon={User}
                                    />
                                  </>
                                )}
                                {isCreator && (
                                  <Badge>Passenger {index + 1}</Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Communication Options (for both creators and passengers) */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Communication</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-md flex items-center text-amber-800">
                        <AlertTriangle className="h-5 w-5 mr-2 flex-shrink-0" />
                        <p>Group communication setup is not working yet. Coming soon!</p>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Button
                          variant="outline"
                          className="w-full"
                          onClick={createWhatsAppGroup}
                        >
                          <MessageCircle className="h-4 w-4 mr-2" />
                          WhatsApp Group
                        </Button>
                        <Button
                          variant="outline"
                          className="w-full"
                          onClick={createDiscordGroup}
                        >
                          <MessageCircle className="h-4 w-4 mr-2" />
                          Discord Group
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              ) : (
                <Card>
                  <CardHeader>
                    <CardTitle>No Passengers Yet</CardTitle>
                    <CardDescription>
                      This ride doesn't have any passengers yet.
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      Be the first to join this ride!
                    </p>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            {/* Map Tab */}
            <TabsContent value="map" className="space-y-6 pt-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">
                    {ride.direction === "SG->FC" ? "Pickup & Dropoff Locations" : "Dropoff Locations"}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-md flex items-center text-amber-800">
                    <AlertTriangle className="h-5 w-5 mr-2 flex-shrink-0" />
                    <p>Maps functionality is not working yet. Coming soon!</p>
                  </div>
                  <LocationMap
                    selectedLocations={dropoffLocations}
                    height="400px"
                  />
                  <div className="mt-4">
                    <h4 className="font-medium">Locations</h4>
                    <div className="grid gap-2 mt-2">
                      {ride.direction === "SG->FC" && (
                        <div className="p-2 border rounded-md">
                          <Badge className="bg-blue-500">Pickup</Badge>
                          <p className="mt-1">{ride.pickupLocation}</p>
                        </div>
                      )}

                      {ride.dropoffLocations.map((location, index) => (
                        <div key={index} className="p-2 border rounded-md">
                          <Badge variant="outline">Dropoff {index + 1}</Badge>
                          <p className="mt-1">
                            {typeof location === 'string' 
                              ? location 
                              : (location.location || 'Unknown location')}
                          </p>
                          {typeof location !== 'string' && location.passengerCount > 0 && (
                            <p className="text-xs text-muted-foreground">
                              Passengers: {location.passengerCount}
                            </p>
                          )}
                        </div>
                      ))}

                      {passengers?.map((passenger, index) => (
                        <div key={`passenger-${passenger.id}`} className="p-2 border rounded-md">
                          <Badge variant="outline" className="bg-green-50">
                            Passenger Dropoff
                          </Badge>
                          <p className="mt-1">
                            {passenger.dropoffLocation}
                            <span className="text-sm text-muted-foreground ml-2">
                              ({passenger.user?.fullName || "Unknown"})
                            </span>
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  );
}
</file>

</files>
